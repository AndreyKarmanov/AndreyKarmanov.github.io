{"version":3,"sources":["Array/BinaryHeap.js","Array/GraphApp2.js","BarSorting/SortingOptions.js","BarSorting/App.js","Data Structures/General.js","Data Structures/Linked.js","Data Structures/SkipList2.js","Data Structures/DataStructures.js","TreeApp.js","router.js","index.js"],"names":["binary_heap","_data","_size","name","enqueue","priority","value","data","i","p","ret","push","v","dequeue","size","result","c1","c2","p0","p1","p2","pop","top","Square","x","y","highlight","this","isEnd","isStart","passable","explored","previous","distance","Infinity","Matrix","grid","DIRECTIONS","create_cols","gen_maze","gen_maze_recur","wallBox","x1","y1","x2","y2","row","setWall","col","a","b","parseInt","Math","random","yMid","xMid","floor","randRange","createSpaceOnLine","swap","count","children","neighboor","fromCord","toCord","staleCord","modifIsY","possible","numPassableAround","length","setEmpty","create_col","squareX","squareY","dir","inbounds","GraphOptions","className","disabled","props","searching","onChange","updateSearch","search","htmlFor","type","id","min","max","step","defaultValue","onInput","e","updateSize","target","onClick","startSearch","sorting","React","Component","RenderMatrix","matrix","map","idx","square","idy","onMouseOver","buttons","clicked","forceUpdate","onMouseDown","GraphApp","SIZES","state","bind","searchDFS","searchDijkstras","SEARCHES","searchBFS","searchAstar","setState","Promise","resolve","setTimeout","starting","vertex","explore","slowRender","PQ","ending","SortingOptions","style","margin","updateSort","sortValue","sortSize","startSort","PureComponent","SortingApp","blocks","sortTypes","sortBubble","sortHeap","sortMerge","sortQuick","sortInsertion","sortSelection","make_bars","sortMergeRecur2","sortQuickRecur","c","d","reject","amount","fy","Array","keys","console","log","then","arr","unsorted","l","r","middle","sortMergeMerge2","newValue","splice","slice","pointer","left","right","pivot","j","trail","sortQuickRecur2","boundry","inBounds","downHeap","small","number","height","backgroundColor","nextID","highlightClass","LinkedNode","next","Linked","updateVisual","len","last","first","newNode","animate","nextNode","node","prev","iterate","insertAfter","Item","SkipNode","item","below","index","highlightBelow","highlightRight","arrowID","above","SkipList","onUpdate","topRight","topLeft","h","resettable","bottom","startNode","iterAfter","leftNode","printRow","hold","previousNodes","String","findPreviousNodes","resetHighlights","previousNode","belowNode","runt","newTopRight","newTopLeft","addAfter","SkipListVisualizer","toSymbol","bottomNode","column","structure","iterCol","opacity","start","end","headSize","s","bottomLeft","renderCol","DataStructureInterface","inputValue","createRef","deleteValue","structureChange","structureValue","ref","addValue","current","delValue","clearStructure","DataStructuresApp","updateStructure","list","skiplist","isNaN","Number","insertOrdered","Tree","root","out","leftChild","rightChild","child","iterAll","Node","parent","RenderNode","hovered","addchildren","dragged","addLeft","position","marginLeft","addRight","onDrag","updateAll","onStop","onMouseLeave","updateValue","RenderTree","tree","getNodes","updateNode","SinglePage","to","path","component","TreeApp","DataStructures","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d33cbe8d.chunk.js","sourcesContent":["/* Binary Heap\r\n * Copyright 2015 330k\r\n * https://github.com/330k/\r\n *\r\n * This software is released under the MIT License.\r\n * http://opensource.org/licenses/mit-license.php\r\n */\r\nfunction binary_heap(){\r\n\t\"use strict\";\r\n\tvar _data = [];\r\n\tvar _size = 0;\r\n\tvar enqueue = function(priority, value){\r\n\t\tvar data = _data;\r\n\t\tvar i = 0;\r\n\t\tvar p = 0;\r\n\t\tvar ret = null;\r\n\t\t\r\n\t\tif(_size){\r\n\t\t\tdata.push({p: priority, v: value});\r\n\t\t\ti = _size;\r\n\t\t\tp = (i - 1) >> 1;//Math.floor((i - 1) * 0.5);\t// parent\r\n\t\t\twhile(p >= 0){\r\n\t\t\t\tif(data[p].p < data[i].p){\r\n\t\t\t\t\tret = data[i];\r\n\t\t\t\t\tdata[i] = data[p];\r\n\t\t\t\t\tdata[p] = ret;\r\n\t\t\t\t\r\n\t\t\t\t\ti = p;\r\n\t\t\t\t\tp = (i - 1) >> 1;//Math.floor((i - 1) * 0.5);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tdata.push({p: priority, v: value});\r\n\t\t}\r\n\t\t_size = _size + 1;\r\n\t};\r\n\tvar dequeue = function(){\r\n\t\tvar data = _data;\r\n\t\tvar size = _size - 1;\r\n\t\tvar result = null;\r\n\t\tvar i = 0;\r\n\t\tvar c1 = 1;\t// left child\r\n\t\tvar c2 = 2;\t// right child\r\n\t\tvar p0 = 0.0;\r\n\t\tvar p1 = 0.0;\r\n\t\tvar p2 = 0.0;\r\n\t\tvar ret = null;\r\n\t\t\r\n\t\tif(_size){\r\n\t\t\tresult = data[0].v;\r\n\t\t\tdata[0] = data[size];\r\n\t\t\tdata.pop();\r\n\t\t\t\r\n\t\t\twhile(c1 < size){\r\n\t\t\t\tif(c2 < size){\r\n\t\t\t\t\tp0 = data[i].p;\r\n\t\t\t\t\tp1 = data[c1].p;\r\n\t\t\t\t\tp2 = data[c2].p;\r\n\t\t\t\t\r\n\t\t\t\t\tif((p1 < p2) && (p0 < p2)){\r\n\t\t\t\t\t\tret = data[i];\r\n\t\t\t\t\t\tdata[i] = data[c2];\r\n\t\t\t\t\t\tdata[c2] = ret;\r\n\t\t\t\t\t\ti = c2;\r\n\t\t\t\t\t}else if(p0 < p1){\r\n\t\t\t\t\t\tret = data[i];\r\n\t\t\t\t\t\tdata[i] = data[c1];\r\n\t\t\t\t\t\tdata[c1] = ret;\r\n\t\t\t\t\t\ti = c1;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tc1 = (i << 1) + 1;\r\n\t\t\t\t\tc2 = (i << 1) + 2;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tp0 = data[i].p;\r\n\t\t\t\t\tp1 = data[c1].p;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(p0 < p1){\r\n\t\t\t\t\t\tret = data[i];\r\n\t\t\t\t\t\tdata[i] = data[c1];\r\n\t\t\t\t\t\tdata[c1] = ret;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t_size = size;\r\n\t\t\treturn result;\r\n\t\t}else{\r\n\t\t\treturn (void 0);\r\n\t\t}\r\n\t};\r\n\tvar top = function(){\r\n\t\treturn _data[0].v;\r\n\t};\r\n\tvar size = function(){\r\n\t\treturn _size;\r\n\t};\r\n\t\r\n\treturn {\r\n\t\tname: 'Binary Heap',\r\n\t\tenqueue: enqueue,\r\n\t\tdequeue: dequeue,\r\n\t\ttop: top,\r\n\t\tsize: size\r\n\t};\r\n};\r\n\r\nexport default binary_heap;","import binary_heap from \"./BinaryHeap.js\";\r\nimport React from \"react\";\r\n\r\nclass Square {\r\n    constructor(x, y, highlight = 'empty') {\r\n\r\n        // For finding adjacent squares\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        // Visualization\r\n        this.highlight = highlight;\r\n\r\n        // Denote start/end\r\n        this.isEnd = false;\r\n        this.isStart = false;\r\n\r\n        // For pathfinding\r\n        this.passable = true;\r\n        this.explored = false;\r\n\r\n        // Dijkstras'\r\n        this.previous = null;\r\n        this.distance = Infinity;\r\n    }\r\n\r\n    explore() {\r\n        this.explored = true;\r\n\r\n        if (this.isEnd) {\r\n            return true;\r\n        };\r\n\r\n        if (this.passable && !this.isStart) {\r\n            this.highlight = \"searched\";\r\n        };\r\n\r\n        return false;\r\n    };\r\n\r\n    clicked() {\r\n        if (!(this.isEnd || this.isStart || this.explored)) {\r\n            if (this.passable) {\r\n                this.highlight = \"wall\";\r\n            } else {\r\n                this.highlight = \"empty\";\r\n            };\r\n            this.passable = !this.passable;\r\n        };\r\n    };\r\n\r\n    setWall() {\r\n        this.passable = false;\r\n        this.highlight = \"wall\";\r\n    };\r\n\r\n    setEmpty() {\r\n        this.passable = true;\r\n        this.highlight = \"empty\";\r\n    };\r\n};\r\n\r\nclass Matrix {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.grid = [];\r\n        this.DIRECTIONS = [[0, -1], [1, 0], [0, 1], [-1, 0]];\r\n\r\n        // Create initial Grid\r\n        this.create_cols(x, y);\r\n        this.gen_maze();\r\n    };\r\n\r\n    starting() {\r\n        return this.grid[1][1];\r\n    };\r\n\r\n    ending() {\r\n        return this.grid[this.x - 2][this.y - 2];\r\n    };\r\n\r\n    gen_maze() {\r\n        this.gen_maze_recur(1, 1, this.x - 2, this.y - 2);\r\n        this.wallBox(0, 0, this.x - 1, this.y - 1);\r\n\r\n        // this.gen_maze_recur(1, 1, 4, 4);\r\n        // this.wallBox(0, 0, 5, 5);\r\n    };\r\n\r\n    wallBox(x1, y1, x2, y2) {\r\n        for (let row = y1; row < y2; row++) {\r\n            this.grid[x1][row].setWall();\r\n            this.grid[x2][row].setWall();\r\n        };\r\n\r\n        for (let col = x1; col <= x2; col++) {\r\n            this.grid[col][y1].setWall();\r\n            this.grid[col][y2].setWall();\r\n        };\r\n    };\r\n\r\n    randRange(a, b) {\r\n        return parseInt(a + Math.random() * (b - a));\r\n    };\r\n    async gen_maze_recur(x1, y1, x2, y2) {\r\n        if (x2 - x1 > 1 && y2 - y1 > 1) {\r\n            let xMid, yMid = 0;\r\n\r\n            if (x2 - x1 > 11 && y2 - y1 > 11) {\r\n                xMid = x1 + Math.floor((x2 - x1) / 2);\r\n                yMid = y1 + Math.floor((y2 - y1) / 2);\r\n\r\n            } else {\r\n                xMid = this.randRange(x1 + 1, x2 - 1);\r\n                yMid = this.randRange(y1 + 1, y2 - 1);\r\n            };\r\n\r\n            for (let x = x1; x <= x2; x++) {\r\n                this.grid[x][yMid].setWall();\r\n            };\r\n            for (let y = y1; y <= y2; y++) {\r\n                this.grid[xMid][y].setWall();\r\n            };\r\n            this.gen_maze_recur(x1, y1, xMid - 1, yMid - 1);\r\n            this.gen_maze_recur(x1, yMid + 1, xMid - 1, y2);\r\n            this.gen_maze_recur(xMid + 1, y1, x2, yMid - 1);\r\n            this.gen_maze_recur(xMid + 1, yMid + 1, x2, y2);\r\n\r\n            switch (this.randRange(0, 3)) {\r\n                case 0:\r\n                    this.createSpaceOnLine(xMid + 1, x2, yMid, false);\r\n                    this.createSpaceOnLine(x1, xMid - 1, yMid, false);\r\n                    this.createSpaceOnLine(yMid + 1, y2, xMid, true);\r\n                    break;\r\n                case 1:\r\n                    this.createSpaceOnLine(y1, yMid - 1, xMid, true);\r\n                    this.createSpaceOnLine(x1, xMid - 1, yMid, false);\r\n                    this.createSpaceOnLine(yMid + 1, y2, xMid, true);\r\n                    break;\r\n                case 2:\r\n                    this.createSpaceOnLine(y1, yMid - 1, xMid, true);\r\n                    this.createSpaceOnLine(xMid + 1, x2, yMid, false);\r\n                    this.createSpaceOnLine(yMid + 1, y2, xMid, true);\r\n                    break;\r\n                case 3:\r\n                    this.createSpaceOnLine(y1, yMid - 1, xMid, true);\r\n                    this.createSpaceOnLine(xMid + 1, x2, yMid, false);\r\n                    this.createSpaceOnLine(x1, xMid - 1, yMid, false);\r\n                    break;\r\n                default:\r\n                    break;\r\n            };\r\n        };\r\n    };\r\n\r\n    numPassableAround(x, y, swap = false) {\r\n        if (swap) {\r\n            [x, y] = [y, x];\r\n        };\r\n\r\n        let count = 0;\r\n        for (let neighboor of this.children(x, y)) {\r\n            if (neighboor.passable) {\r\n                count++;\r\n            };\r\n        };\r\n        return count;\r\n    };\r\n\r\n    createSpaceOnLine(fromCord, toCord, staleCord, modifIsY) {\r\n        let possible = [];\r\n        for (; fromCord <= toCord; fromCord++) {\r\n            if (this.numPassableAround(fromCord, staleCord, modifIsY) > 1) {\r\n                possible.push(fromCord);\r\n            };\r\n        };\r\n        if (possible.length > 0) {\r\n            if (modifIsY) {\r\n                this.grid[staleCord][possible[this.randRange(0, possible.length)]].setEmpty();\r\n            } else {\r\n                this.grid[possible[this.randRange(0, possible.length)]][staleCord].setEmpty();\r\n            };\r\n        };\r\n    };\r\n\r\n    create_cols(x, y) {\r\n        for (let col = 0; col < x; col++) {\r\n            this.grid.push(this.create_col(col, y));\r\n        };\r\n        this.grid[1][1].highlight = 'start';\r\n        this.grid[1][1].isStart = true;\r\n        this.grid[this.x - 2][this.y - 2].highlight = 'end';\r\n        this.grid[this.x - 2][this.y - 2].isEnd = true;\r\n    };\r\n\r\n    create_col(x, y) {\r\n        let col = [];\r\n        for (let row = 0; row < y; row++) {\r\n            col.push(new Square(x, row, 'empty'));\r\n        };\r\n        return col;\r\n    };\r\n\r\n    inbounds(x, y) {\r\n        return 0 <= x && x < this.x && 0 <= y && y < this.y;\r\n    };\r\n\r\n\r\n    *children(squareX, squareY) {\r\n        let x, y = null;\r\n        for (let dir of this.DIRECTIONS) {\r\n            if (this.inbounds((x = squareX - dir[0]), (y = squareY - dir[1]))) {\r\n                yield this.grid[x][y];\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\n\r\n// Rendering of the choices\r\nclass GraphOptions extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"row w-100\">\r\n                <div className=\"col-6 mt-2\">\r\n                    <select className=\"form-select\" disabled={this.props.searching} onChange={this.props.updateSearch} value={this.props.search}>\r\n                        <option value=\"DFS\">Depth First Search</option>\r\n                        <option value=\"BFS\">Breadth First Search</option>\r\n                        <option value=\"ASTAR\">A star Search</option>\r\n                        <option value=\"DIJ\">Djikstras</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <label htmlFor=\"rangeSelect\" className=\"form-label\"> Grid Size: {[\"Small\", \"Medium\", \"Large\", \"X-Large\"][this.props.size]}</label>\r\n                    <input type=\"range\" className=\"form-range\" id=\"rangeSelect\" disabled={this.props.searching} min=\"0\" max=\"3\" step=\"1\" defaultValue={this.props.size} onInput={(e) => this.props.updateSize(e.target.value)} />\r\n                </div>\r\n                <hr className=\"mt-4\" />\r\n                <div className=\"col-6\">\r\n                    <button className={\"w-100 btn btn-success\" + (this.props.searching ? ' disabled' : ' ')} onClick={this.props.startSearch}>{this.props.sorting ? 'Searching...' : 'Search'}</button>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <button className={\"w-100 btn btn-success\" + (this.props.searching ? ' disabled' : ' ')} onClick={() => { this.props.updateSize(this.props.size) }}>{this.props.sorting ? 'Regenerate' : 'New Maze'}</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\n\r\n// Rendering of the overall.\r\nclass RenderMatrix extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container h-100 d-flex flex-row align-items-stretch mt-3 mb-3\">\r\n                {this.props.matrix.grid.map((col, idx) =>\r\n                    <div className=\"d-flex flex-column flex-column-reverse w-100 h-100\" key={idx}>\r\n                        {col.map((square, idy) =>\r\n                            <div\r\n                                className={\"GridSquare shadow-sm border rounded \" + square.highlight}\r\n                                key={idy}\r\n                                onMouseOver={(e) => {\r\n                                    if (e.buttons) {\r\n                                        square.clicked()\r\n                                        this.forceUpdate();\r\n                                    };\r\n                                }}\r\n                                onMouseDown={() => {\r\n                                    square.clicked()\r\n                                    this.forceUpdate();\r\n                                }}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nclass GraphApp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.SIZES = [[10, 5], [25, 25], [24, 12], [32, 16]];\r\n        this.state = {\r\n            search: 'DIJ',\r\n            searching: false,\r\n            size: 1,\r\n            matrix: new Matrix(25, 25)\r\n        };\r\n\r\n\r\n\r\n        this.updateSearch = this.updateSearch.bind(this);\r\n        this.updateSize = this.updateSize.bind(this);\r\n        this.startSearch = this.startSearch.bind(this);\r\n        this.searchDFS = this.searchDFS.bind(this);\r\n        this.searchDijkstras = this.searchDijkstras.bind(this);\r\n\r\n        this.SEARCHES = {\r\n            'DFS': this.searchDFS,\r\n            'DIJ': this.searchDijkstras,\r\n            'BFS': this.searchBFS,\r\n            'ASTAR': this.searchAstar\r\n        };\r\n    };\r\n\r\n    updateSize(value) {\r\n        this.setState({\r\n            size: value,\r\n            matrix: new Matrix(...this.SIZES[value])\r\n        });\r\n    };\r\n\r\n    updateSearch(e) {\r\n        this.setState({\r\n            search: e.target.value\r\n        });\r\n    };\r\n\r\n    slowRender() {\r\n        return new Promise((resolve) => {\r\n            this.forceUpdate();\r\n            setTimeout(() => {\r\n                resolve();\r\n            }, 5);\r\n        });\r\n    };\r\n\r\n    async startSearch() {\r\n        this.setState({\r\n            searching: true\r\n        });\r\n        await this.SEARCHES[this.state.search](this.state.matrix.starting());\r\n        this.setState({\r\n            searching: false\r\n        });\r\n    };\r\n\r\n\r\n    async searchDFS(square) {\r\n        for (let vertex of this.state.matrix.children(square)) {\r\n            if (vertex.passable && !vertex.explored) {\r\n                if (vertex.explore()) {\r\n                    return true;\r\n                } else {\r\n                    await this.slowRender();\r\n                    if (await this.searchDFS(vertex)) {\r\n                        return true;\r\n                    };\r\n                };\r\n            };\r\n        };\r\n    };\r\n\r\n    async searchDijkstras(square) {\r\n        var PQ = binary_heap();\r\n        square.distance = 0;\r\n        PQ.enqueue(0, square);\r\n        while (PQ.size() > 0) {\r\n            let square = PQ.dequeue();\r\n            // explore square, if ending then quit.\r\n            if (square.explore()) {\r\n                break;\r\n            } else {\r\n                // square.explored, therefore need a render.\r\n                await this.slowRender();\r\n                for (let vertex of [...this.state.matrix.children(square.x, square.y)]) {\r\n                    // if the square is not a wall, isn't explored, and the new distance is shorter.\r\n                    if (vertex.passable && !vertex.explored && square.distance + 1 < vertex.distance) {\r\n                        vertex.distance = square.distance + 1;\r\n                        vertex.previous = square;\r\n                        PQ.enqueue(-(square.distance + 1), vertex);\r\n                    };\r\n                };\r\n            };\r\n        };\r\n        // loop through the previous ones ya know. \r\n        square = this.state.matrix.ending().previous;\r\n        if (!square) {\r\n            return;\r\n        };\r\n        while (square.previous) {\r\n            square.highlight = \"Path\";\r\n            square = square.previous;\r\n            await this.slowRender();\r\n        };\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"list-group shadow-lg border rounded\">\r\n                <div className=\"bg-light list-group-item\">\r\n                    <div className=\"container-fluid\">\r\n                        <GraphOptions search={this.state.search} searching={this.state.searching} size={this.state.size} startSearch={this.startSearch} updateSearch={this.updateSearch} updateSize={this.updateSize} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"list-group-item\">\r\n                    <div className=\"container bottom\">\r\n                        <RenderMatrix matrix={this.state.matrix} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default GraphApp;","import React from \"react\";\r\n\r\nclass SortingOptions extends React.PureComponent {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row w-100\" style={{ margin: \"0 0\" }}>\r\n                <div className=\"col-6 mt-2\">\r\n                    <select id=\"sortSelect\" className=\"form-select\" disabled={this.props.sorting} onChange={this.props.updateSort} value={this.props.sortValue}>\r\n                        <option value=\"merge\">Merge Sort</option>\r\n                        <option value=\"quick\">Quick Sort</option>\r\n                        <option value=\"heap\">Heap Sort</option>\r\n                        <option value=\"bubble\">Bubble Sort</option>\r\n                        <option value=\"insert\">Insertion Sort</option>\r\n                        <option value=\"selection\">selection Sort</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <label htmlFor=\"rangeSelect\" className=\"form-label\">Array Size</label>\r\n                    <input type=\"range\" className=\"form-range\" id=\"rangeSelect\" disabled={this.props.sorting} min=\"10\" max=\"100\" step=\"1\" defaultValue={this.props.sortSize} onInput={(e) => this.props.updateSize(e.target.value)} />\r\n                </div>\r\n                <hr className=\"mt-4\" />\r\n                <button id=\"sort\" className={\"btn btn-success\" + (this.props.sorting ? ' disabled' : ' ')} onClick={this.props.startSort}>{this.props.sorting ? 'Sorting': 'Sort'}</button>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\n\r\nexport default SortingOptions;","import React from 'react';\r\nimport SortingOptions from './SortingOptions.js';\r\n\r\nclass SortingApp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sortValue: 'merge',\r\n            sortSize: \"50\",\r\n            blocks: []\r\n        };\r\n\r\n        this.sortTypes = {\r\n            'bubble': this.sortBubble, 'heap': this.sortHeap,\r\n            'merge': this.sortMerge, 'quick': this.sortQuick,\r\n            'insert': this.sortInsertion, 'selection': this.sortSelection\r\n        };\r\n\r\n\r\n        this.updateSize = this.updateSize.bind(this);\r\n        this.updateSort = this.updateSort.bind(this);\r\n        this.make_bars = this.make_bars.bind(this);\r\n        this.startSort = this.startSort.bind(this);\r\n        this.slowRender = this.slowRender.bind(this);\r\n        this.sortMergeRecur2 = this.sortMergeRecur2.bind(this);\r\n        this.sortQuickRecur = this.sortQuickRecur.bind(this);\r\n        this.sorting = false;\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.make_bars(50);\r\n    };\r\n\r\n    // Thanks to cocco on stack overflow, shuffles an array.\r\n    fy(a, b, c, d) {//array,placeholder,placeholder,placeholder\r\n        c = a.length; while (c) {\r\n            b = Math.random() * c-- | 0;\r\n            d = a[c];\r\n            a[c] = a[b];\r\n            a[b] = d;\r\n        }\r\n        return a;\r\n    };\r\n\r\n    slowRender(blocks) {\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                this.setState({ blocks: blocks }, () => {\r\n                    resolve()\r\n                })\r\n            }, 1375 / parseInt(this.state.sortSize));\r\n        })\r\n    }\r\n\r\n    make_bars(amount) {\r\n        this.setState({\r\n            blocks: this.fy([...Array(parseInt(amount)).keys()])\r\n        });\r\n    };\r\n\r\n    updateSort(e) {\r\n        this.setState({\r\n            sortValue: e.target.value\r\n        });\r\n    };\r\n\r\n    updateSize(e) {\r\n        this.make_bars(e.target.value)\r\n    };\r\n\r\n    startSort() {\r\n        if (this.sorting) {\r\n            return\r\n        };\r\n        this.sorting = true\r\n        console.log(this.state.sortValue, 'selected')\r\n        this.sortTypes[this.state.sortValue].bind(this)().then(() => {\r\n            this.sorting = false\r\n            console.log('sorting complete')\r\n            this.forceUpdate();\r\n        });\r\n        console.log('done starting')\r\n    }\r\n\r\n    swap(arr, a, b) {\r\n        [arr[a], arr[b]] = [arr[b], arr[a]]\r\n    }\r\n\r\n    async sortBubble() {\r\n        let a = this.state.blocks\r\n        let unsorted = true;\r\n        while (unsorted) {\r\n            unsorted = false;\r\n            for (let x = 0; x < a.length - 1; x++) {\r\n                if (a[x] > a[x + 1]) {\r\n                    this.swap(a, x, x + 1);\r\n                    unsorted = true;\r\n                    await this.slowRender(a);\r\n                }\r\n            };\r\n        };\r\n    };\r\n\r\n    async sortSelection() {\r\n        let a = this.state.blocks\r\n        for (let x = 0; x < a.length; x++) {\r\n            let min = x\r\n            for (let y = x; y < a.length; y++) {\r\n                if (a[min] > a[y]) {\r\n                    min = y\r\n                }\r\n            }\r\n            this.swap(a, min, x)\r\n            await this.slowRender(a)\r\n        }\r\n    };\r\n\r\n    async sortMerge() {\r\n        await this.sortMergeRecur2(this.state.blocks, 0, this.state.blocks.length)\r\n    };\r\n\r\n    async sortMergeRecur2(arr, l, r) {\r\n        // inplace merge sort.\r\n        if (r > l) {\r\n            let middle = Math.floor((r - l) / 2) + l;\r\n            await this.sortMergeRecur2(arr, l, middle);\r\n            await this.sortMergeRecur2(arr, middle, r);\r\n            await this.sortMergeMerge2(arr, l, middle, r);\r\n        };\r\n    };\r\n\r\n    // async sortMergeMerge(arr, l, middle, r) {\r\n    //     let left = arr.slice(l, middle);\r\n    //     let right = arr.slice(middle, r);\r\n    //     let pointer = l;\r\n\r\n    //     while (left.length && right.length) {\r\n    //         if (left[0] < right[0]) {\r\n    //             arr[pointer++] = left.shift();\r\n    //         } else {\r\n    //             arr[pointer++] = right.shift();\r\n    //         };\r\n    //         await this.slowRender(arr)\r\n    //     };\r\n\r\n    //     while (left.length) {\r\n    //         arr[pointer++] = left.shift();\r\n    //         await this.slowRender(arr)\r\n    //     };\r\n    //     while (right.length) {\r\n    //         arr[pointer++] = right.shift();\r\n    //         await this.slowRender(arr)\r\n    //     };\r\n    // };\r\n\r\n    async sortMergeMerge2(arr, l, middle, r) {\r\n        // inplace merge.\r\n        let newValue = null;\r\n        while (l < middle && middle < r) {\r\n            if (arr[l] < arr[middle]) {\r\n                l++;\r\n                await this.slowRender(arr)\r\n\r\n            } else {\r\n                newValue = arr[middle];\r\n                arr.splice(middle++, 1);\r\n                arr.splice(l++, 0, newValue);\r\n                await this.slowRender(arr)\r\n            };\r\n        };\r\n\r\n        if (middle < r) {\r\n            let slice = arr.slice(middle, r);\r\n            arr.splice(middle, slice.length, ...slice);\r\n            await this.slowRender(arr)\r\n        };\r\n    };\r\n\r\n    // async sortMergeRecur(arr, l, r) {\r\n    //     if (arr.slice(l, r).length > 1) {\r\n    //         let middle = Math.floor(arr.slice(l, r).length / 2)\r\n    //         let a = await this.sortMergeRecur(arr, l, l + middle)\r\n    //         let b = await this.sortMergeRecur(arr, l + middle, r)\r\n    //         let little = null\r\n    //         let pointer = l\r\n    //         while (pointer < r) {\r\n    //             if (a.length > 0) {\r\n    //                 if (b.length > 0) {\r\n    //                     if (a[0] > b[0]) {\r\n    //                         little = b.shift();\r\n    //                     } else {\r\n    //                         little = a.shift();\r\n    //                     };\r\n    //                 } else {\r\n    //                     little = a.shift();\r\n    //                 };\r\n    //             } else {\r\n    //                 little = b.shift();\r\n    //             };\r\n    //             arr[pointer++] = little;\r\n    //             await this.slowRender(arr);\r\n    //         };\r\n    //     };\r\n    //     return arr.slice(l, r)\r\n    // };\r\n\r\n    async sortInsertion() {\r\n        let a = this.state.blocks\r\n        for (let x = 1; x < a.length; x++) {\r\n            let pointer = x;\r\n            for (let y = x - 1; y >= 0; y--) {\r\n                if (a[pointer] < a[y]) {\r\n                    this.swap(a, pointer, y)\r\n                    pointer = y;\r\n                    await this.slowRender(a);\r\n                } else {\r\n                    break;\r\n                };\r\n            };\r\n        };\r\n    };\r\n\r\n    async sortQuick() {\r\n        await this.sortQuickRecur(this.state.blocks, 0, this.state.blocks.length - 1)\r\n    }\r\n\r\n    async sortQuickRecur(a, left, right) {\r\n        if (left < right) {\r\n            let pivot = a[right];\r\n            let i = left - 1;\r\n            for (let j = left; j < right; j++) {\r\n                if (a[j] < pivot) {\r\n                    i += 1;\r\n                    this.swap(a, i, j);\r\n                    await this.slowRender(a);\r\n                };\r\n            };\r\n            this.swap(a, i + 1, right);\r\n            await this.slowRender(a);\r\n            await this.sortQuickRecur(a, left, i);\r\n            await this.sortQuickRecur(a, i + 2, right);\r\n            return null\r\n        };\r\n    };\r\n\r\n    async sortQuickRecur2(arr, l, r) {\r\n        if (r > l) {\r\n            let pivot = arr[r];\r\n            let trail = l - 1;\r\n            for (let pointer = l; pointer < r; pointer++) {\r\n                if (arr[pointer] < pivot) {\r\n                    this.swap(arr, pointer, ++trail);\r\n                    await this.slowRender(arr);\r\n                };\r\n            };\r\n            this.swap(arr, r, trail + 1);\r\n            await this.slowRender(arr);\r\n            await this.sortQuickRecur2(arr, l, trail);\r\n            await this.sortQuickRecur2(arr, trail + 2, r);\r\n\r\n        };\r\n    };\r\n\r\n    async sortHeap() {\r\n        var arr = this.state.blocks\r\n        var boundry = arr.length\r\n\r\n        const inBounds = (i) => {\r\n            return i < boundry;\r\n        };\r\n\r\n        const left = (i) => {\r\n            return inBounds(i * 2 + 1) ? (i * 2 + 1) : null\r\n        };\r\n\r\n        const right = (i) => {\r\n            return inBounds(i * 2 + 2) ? (i * 2 + 2) : null\r\n        };\r\n        const downHeap = async (i) => {\r\n            let l, r, small;\r\n            while ((l = left(i))) {\r\n                small = l;\r\n                if ((r = right(i))) {\r\n                    if (arr[r] > arr[l]) {\r\n                        small = r;\r\n                    };\r\n                };\r\n                if (arr[small] > arr[i]) {\r\n                    this.swap(arr, small, i);\r\n                    i = small;\r\n                    await this.slowRender(arr);\r\n                } else {\r\n                    break;\r\n                };\r\n            };\r\n        };\r\n\r\n        for (let x = boundry - 1; x >= 0; x--) {\r\n            await downHeap(x);\r\n        };\r\n\r\n        while (boundry > 0) {\r\n            boundry--;\r\n            this.swap(arr, 0, boundry)\r\n            await this.slowRender(arr)\r\n            await downHeap(0)\r\n        };\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"list-group shadow-lg border rounded\">\r\n                <div className=\"bg-light list-group-item\">\r\n                    <div className=\"container-fluid\">\r\n                        <SortingOptions updateSort={this.updateSort} startSort={this.startSort} updateSize={this.make_bars} sortSize={this.state.sortSize} sortValue={this.state.sortValue} sorting={this.sorting} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"list-group-item\">\r\n                    <div className=\"container justify-content-center sorting bottom\">\r\n                        {this.state.blocks.map((number) => <div className=\"sortable\" key={number} style={{ height: (number) + 1 + \"%\", backgroundColor: `hsl(177, 70%, ${60 - (number) * 0.5}%)` }}></div>)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default SortingApp;","var nextID = 0;\r\n\r\nexport const highlightClass = {\r\n    0: '',\r\n    1: 'updated',\r\n    2: 'touched'\r\n};\r\nexport class BaseNode {\r\n    constructor(value, highlight = 0) {\r\n        // 0 == nothing\r\n        // 1 == updated\r\n        // 2 == compared\r\n        this.value = value;\r\n        this.highlight = highlight;\r\n        this.id = nextID++;\r\n    };\r\n};","import React from 'react';\r\nimport Xarrow from 'react-xarrows/lib';\r\nimport { BaseNode, highlightClass } from './General.js';\r\n\r\n\r\nclass LinkedNode extends BaseNode {\r\n    constructor(next, value, highlight) {\r\n        super(value, highlight)\r\n        this.next = next;\r\n    };\r\n};\r\n\r\n// new plan is to redo it using a settimeout and using state I thinks. \r\n\r\nexport class Linked {\r\n    constructor(updateVisual = () => { }) {\r\n\r\n        // call these when performing a search or something.\r\n        this.updateVisual = updateVisual;\r\n\r\n        this.len = 0;\r\n        this.last = new LinkedNode(null, Infinity);\r\n        this.first = new LinkedNode(this.last, null);\r\n    };\r\n\r\n    async insertAfter(p, value) {\r\n        let newNode = new LinkedNode(p.next, value, 0);\r\n        p.next = newNode;\r\n        this.len++;\r\n\r\n        await this.animate(newNode, 1)\r\n\r\n        this.updateVisual();\r\n\r\n    };\r\n\r\n    deleteAfter(p) {\r\n        let nextNode = p.next;\r\n        p.next = nextNode.next;\r\n    };\r\n\r\n    animate(node, highlight) {\r\n        return new Promise((resolve) => {\r\n            node.highlight = highlight;\r\n            this.updateVisual();\r\n            setTimeout(() => {\r\n                node.highlight = 0;\r\n                this.updateVisual();\r\n                resolve()\r\n            }, 300);\r\n        });\r\n    };\r\n\r\n    async insertOrdered(value) {\r\n        let prev = this.first\r\n        for (let node of this.iterate()) {\r\n            await this.animate(node, 2);\r\n            if (node.value > value) {\r\n                this.insertAfter(prev, value);\r\n                return;\r\n            };\r\n            prev = node;\r\n        };\r\n        this.insertAfter(prev, value);\r\n\r\n    };\r\n\r\n    delete(value) {\r\n\r\n    };\r\n\r\n    *iterate() {\r\n        let node = this.first.next;\r\n        while (node !== this.last) {\r\n            yield node;\r\n            node = node.next;\r\n        };\r\n    };\r\n};\r\n\r\nclass LinkedVisualise extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid d-flex justify-content-center p-3\">\r\n                {[...this.props.structure.iterate()].map((node, index) => {\r\n                    return (\r\n                        <div key={node.id} id={node.id} className={\"linkedNode text-center h-50 w-100 m-3 align-self-center rounded \" + highlightClass[node.highlight]}>\r\n                            {node.value}\r\n                        </div>\r\n                    );\r\n                })}\r\n                {[...this.props.structure.iterate()].map((node, index) => {\r\n                    if (!node.next.id) {\r\n                        return null\r\n                    };\r\n                    return (\r\n                        <Xarrow key={node.id} start={String(node.id)} end={String(node.next.id)} headSize={2} />\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default LinkedVisualise;","import React from 'react';\r\nimport Xarrow, { Xwrapper } from 'react-xarrows';\r\nimport { highlightClass } from './General';\r\n\r\nvar nextID = 0;\r\nclass Item {\r\n    constructor(value) {\r\n        this.value = value;\r\n    };\r\n};\r\n\r\nclass SkipNode {\r\n    constructor(item, next = null, below = null, index = null, highlight = 0) {\r\n        this.item = item;\r\n        this.next = next;\r\n        this.below = below;\r\n        this.index = index;\r\n        this.highlight = highlight;\r\n        this.highlightBelow = false;\r\n        this.highlightRight = false;\r\n        this.id = nextID++;\r\n        this.arrowID = nextID++;\r\n\r\n        // above is only needed to ease rendering. Not necessary for a basic skiplist.\r\n        this.above = null;\r\n    }\r\n};\r\n\r\nexport class SkipList {\r\n    constructor(onUpdate = () => { }) {\r\n        this.onUpdate = onUpdate;\r\n\r\n        // topright is only needed to ease rendering. Not necessary for a basic skiplist.\r\n        this.topRight = new SkipNode(new Item(Infinity), null, null, 1)\r\n\r\n        this.topLeft = new SkipNode(new Item(-Infinity), this.topRight, null, 0);\r\n        this.len = 2;\r\n        this.h = 1;\r\n        this.resettable = [];\r\n    };\r\n\r\n    *iterCol(bottom) {\r\n        while (bottom) {\r\n            yield bottom;\r\n            bottom = bottom.above;\r\n        };\r\n    };\r\n\r\n    *iterRows() {\r\n        let node = this.topLeft;\r\n        while (node) {\r\n            yield node;\r\n            node = node.below;\r\n        };\r\n    };\r\n\r\n    *iterAfter(node) {\r\n        while (node) {\r\n            yield node;\r\n            node = node.next;\r\n        };\r\n    };\r\n\r\n    printRow(startNode) {\r\n        console.log([...this.iterAfter(startNode)].map((node) => node.item.value));\r\n    };\r\n\r\n    printAll() {\r\n        let leftNode = this.topLeft;\r\n        while (leftNode) {\r\n            this.printRow(leftNode);\r\n            leftNode = leftNode.below;\r\n        };\r\n    };\r\n\r\n    animate(node, highlight, hold = false) {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                node.highlight = highlight;\r\n                this.onUpdate();\r\n                if (!hold) {\r\n                    node.highlight = 0;\r\n                };\r\n                resolve();\r\n            }, 150);\r\n        });\r\n    };\r\n\r\n    resetHighlights() {\r\n        for (let node of this.resettable) {\r\n            node.highlight = 0;\r\n            node.highlightBelow = false;\r\n            node.highlightRight = false;\r\n        };\r\n    };\r\n\r\n    async findPreviousNodes(value) {\r\n        let node = this.topLeft;\r\n        let previousNodes = [];\r\n        while (true) {\r\n            await this.animate(node, 2, true);\r\n            this.resettable.push(node);\r\n            if (node.next.item.value >= value || node.next.item.value === Infinity) {\r\n                previousNodes.push(node);\r\n                if (node.below) {\r\n                    node.highlightBelow = true;\r\n                    node = node.below\r\n                } else {\r\n                    node.highlightRight = true;\r\n                    return previousNodes;\r\n                };\r\n            } else {\r\n                node.highlightRight = true;\r\n                node = node.next;\r\n            };\r\n        };\r\n    };\r\n\r\n    delAfter(previous, node) {\r\n        previous.next = node.next;\r\n    };\r\n\r\n    async delValue(value) {\r\n        value = String(value);\r\n        let previous = await this.findPreviousNodes(value, true);\r\n        for (let node of previous) {\r\n            console.log(node, node.next.item.value === value, value, node.next.item.value);\r\n            if (String(node.next.item.value) === value) {\r\n                console.log(node);\r\n                if (node.next.below){\r\n                    node.next.below.above = null;\r\n                }else{\r\n                    this.len--;\r\n                };\r\n                node.next = node.next.next;\r\n                await this.animate(node, 2, true);\r\n            };\r\n        };\r\n        this.resetHighlights();\r\n    };\r\n\r\n    async addAfter(previous, newNode) {\r\n        newNode.next = previous.next;\r\n        previous.next = newNode;\r\n        newNode.index = previous.index + 1;\r\n        await this.animate(newNode, 1, true);\r\n        this.resettable.push(newNode);\r\n    };\r\n\r\n    async insertOrdered(value) {\r\n        let previous = await this.findPreviousNodes(value);\r\n        let h = 1;\r\n        let previousNode = previous[previous.length - h];\r\n        let belowNode = null;\r\n        let item = new Item(value);\r\n        let newNode;\r\n        this.len++;\r\n        let runt = () => {\r\n            let p = Math.random();\r\n            return p > 0.5;\r\n        }\r\n        do {\r\n            if (h > this.h) {\r\n                this.h++;\r\n\r\n                let newTopRight = new SkipNode(new Item(Infinity), null, this.topRight, this.len - 1)\r\n                let newTopLeft = new SkipNode(new Item(-Infinity), newTopRight, this.topLeft, 0);\r\n\r\n                this.topRight.above = newTopRight;\r\n                this.topLeft.above = newTopLeft;\r\n\r\n                this.topRight = newTopRight;\r\n                this.topLeft = newTopLeft;\r\n\r\n                previous.splice(0, 0, this.topLeft);\r\n                previousNode = previous[previous.length - h];\r\n            };\r\n            newNode = new SkipNode(item, previousNode.next, belowNode, previous.next, 0)\r\n            if (belowNode) {\r\n                belowNode.above = newNode;\r\n            };\r\n            await this.addAfter(previousNode, belowNode = newNode);\r\n            previousNode = previous[previous.length - ++h];\r\n\r\n        } while (runt());\r\n        this.resetHighlights();\r\n    };\r\n};\r\n\r\nclass SkipListVisualizer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toSymbol = this.toSymbol.bind(this);\r\n    };\r\n\r\n    toSymbol(value) {\r\n        if (value === Infinity) {\r\n            return \"∞\";\r\n        } else if (value === -Infinity) {\r\n            return \"-∞\";\r\n        } else {\r\n            return String(value);\r\n        };\r\n    };\r\n\r\n    renderCol(bottomNode) {\r\n        let column = [...this.props.structure.iterCol(bottomNode)];\r\n        // make thte unused arrows opacity at 50% or something.\r\n        return (\r\n            <div className=\"d-flex flex-column-reverse m-2\">\r\n                <Xwrapper>\r\n                    {column.map((node) => {\r\n                        return (\r\n                            <div className={\"SkipNode border rounded m-3 p-2 text-center fs-6 \" + highlightClass[node.highlight]} id={node.id} key={node.id}>\r\n                                {this.toSymbol(node.item.value)}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    {column.map((node) => {\r\n                        if (node.next) {\r\n                            return (\r\n                                <div style={{ opacity: node.highlightRight ? '100%' : '30%' }}>\r\n                                    <Xarrow start={String(node.id)} end={String(node.next.id)} key={nextID++} headSize={4} />\r\n                                </div>\r\n                            );\r\n                        } else {\r\n                            return null;\r\n                        };\r\n\r\n                    })}\r\n                    {column.map((node) => {\r\n                        if (node.below) {\r\n                            return (\r\n                                <div style={{ opacity: node.highlightBelow ? '100%' : '30%' }}>\r\n                                    <Xarrow start={String(node.id)} end={String(node.below.id)} key={nextID++} headSize={4} s />\r\n                                </div>\r\n                            );\r\n                        } else {\r\n                            return null;\r\n                        };\r\n\r\n                    })}\r\n\r\n                </Xwrapper>\r\n            </div>\r\n\r\n        );\r\n    };\r\n\r\n    render() {\r\n        let bottomLeft = this.props.structure.topLeft;\r\n        while (bottomLeft.below) {\r\n            bottomLeft = bottomLeft.below;\r\n        };\r\n\r\n        return (\r\n            <div className=\"d-flex flex-row\">\r\n                {[...this.props.structure.iterAfter(bottomLeft)].map((bottomNode) => {\r\n                    return this.renderCol(bottomNode)\r\n                })}\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default SkipListVisualizer;","import React, { createRef } from 'react';\r\nimport Draggable from 'react-draggable';\r\nimport LinkedApp, { Linked } from './Linked.js';\r\nimport SkipListVisualizer, { SkipList } from './SkipList2.js';\r\n\r\nclass DataStructureInterface extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.inputValue = createRef();\r\n        this.deleteValue = createRef();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row w-100\" style={{ margin: \"0 0\" }}>\r\n                <div className=\"col-6 mt-2\">\r\n                    <select id=\"sortSelect\" className=\"form-select\" onChange={(e) => this.props.structureChange(e)} value={this.props.structureValue}>\r\n                        <option value=\"Lists\" disabled={true}>Lists:</option>\r\n                        <option value=\"list\">ArrayList</option>\r\n                        <option value=\"array\">Array</option>\r\n                        <option value=\"linked list\">Doubly Linked</option>\r\n                        <option value=\"skiplist\">Skip List</option>\r\n                        <option value=\"Trees\" disabled={true}>Trees:</option>\r\n                        <option value=\"redblack\">Red Black</option>\r\n                        <option value=\"avl\">AVL</option>\r\n                        <option value=\"splay\">Splay</option>\r\n                    </select>\r\n                </div>\r\n                <hr className=\"mt-4\" />\r\n                <div className=\"col-4 mt-2\">\r\n                    <div className=\"input-group mb-3\">\r\n                        <input type=\"text\" className=\"form-control\" ref={this.inputValue} />\r\n                        <button className=\"btn btn-success\" onClick={() => { this.props.addValue(this.inputValue.current.value); this.inputValue.current.value = ''; }}>Insert Value</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-4 mt-2\">\r\n                    <div className=\"input-group mb-3\">\r\n                        <input type=\"text\" className=\"form-control\" ref={this.deleteValue} />\r\n                        <button className=\"btn btn-danger\" onClick={() => { this.props.delValue(this.deleteValue.current.value); this.deleteValue.current.value = ''; }}>Delete Value</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-2 mt-2\">\r\n                    <button className=\"btn btn-danger\" onClick={this.props.clearStructure}>Clear All</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n};\r\nclass DataStructuresApp extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            structure: 'skiplist'\r\n        };\r\n\r\n        this.clearStructure = this.clearStructure.bind(this);\r\n        this.updateStructure = this.updateStructure.bind(this);\r\n        this.addValue = this.addValue.bind(this);\r\n        this.delValue = this.delValue.bind(this);\r\n        this.animate = this.animate.bind(this);\r\n        this.list = new Linked(this.animate, this.animate, this.animate)\r\n        this.skiplist = new SkipList(this.animate)\r\n\r\n    };\r\n\r\n    componentDidMount() {\r\n        // this.skiplist.insertOrdered(1);\r\n        // this.skiplist.insertOrdered(2);\r\n        // this.skiplist.insertOrdered(3);\r\n    };\r\n\r\n    animate() {\r\n        this.forceUpdate()\r\n    };\r\n\r\n    updateStructure(e) {\r\n        this.setState({\r\n            structure: e.target.value\r\n        });\r\n    };\r\n\r\n    clearStructure() {\r\n        console.log('delete all');\r\n    };\r\n\r\n    addValue(value) {\r\n        if (value !== '') {\r\n            if (!isNaN(value)) {\r\n                value = Number(value)\r\n            };\r\n            console.log(value);\r\n            this.skiplist.insertOrdered(value);\r\n            this.forceUpdate();\r\n        };\r\n    };\r\n\r\n    delValue(value) {\r\n        if (value) {\r\n            console.log('del value; ', value);\r\n            this.skiplist.delValue(value);\r\n        };\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"h-100\">\r\n                <div className=\"list-group shadow-lg border rounded h-75\">\r\n                    <div className=\"bg-light list-group-item\">\r\n                        <div className=\"container-fluid\">\r\n                            <DataStructureInterface structureChange={this.updateStructure} structureValue={this.state.structure} addValue={this.addValue} delValue={this.delValue} clearStructure={this.clearStructure} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"list-group-item h-100 overflow-hidden\">\r\n                        <Draggable>\r\n                            <div>\r\n                                <SkipListVisualizer structure={this.skiplist} className=\"draggable\" />\r\n                            </div>\r\n                        </Draggable>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    };\r\n};\r\n\r\nexport default DataStructuresApp;","import React from 'react';\r\nimport Draggable from 'react-draggable';\r\nimport Xarrow from 'react-xarrows/lib';\r\n\r\nvar nextID = 0\r\nclass Tree {\r\n\r\n    constructor() {\r\n        this.root = null;\r\n        this.size = null;\r\n    };\r\n\r\n    children(node) {\r\n        let out = [];\r\n        if (node.leftChild) {\r\n            out.push(node.leftChild);\r\n        };\r\n        if (node.rightChild) {\r\n            out.push(node.rightChild);\r\n        };\r\n        // boolean(node.leftChild) ? out.push(node.leftChild) : null;\r\n        // boolean(node.rightChild) ? out.push(node.rightChild) : null;\r\n        return out;\r\n    };\r\n\r\n    *iterAll(node) {\r\n        if (!node) {\r\n            return;\r\n        };\r\n        yield node;\r\n        for (let child of this.children(node)) {\r\n            for (let out of this.iterAll(child)) {\r\n                yield out;\r\n            };\r\n        };\r\n    };\r\n\r\n    getNodes(node) {\r\n        return [...this.iterAll(node)]\r\n    };\r\n\r\n    addLeft(node, value) {\r\n        if (!node.leftChild) {\r\n            this.size++;\r\n            node.leftChild = new Node(value, node);\r\n            return node.leftChild;\r\n        };\r\n    };\r\n\r\n    addRight(node, value) {\r\n        if (!node.rightChild) {\r\n            this.size++;\r\n            node.rightChild = new Node(value, node);\r\n            return node.rightChild;\r\n        };\r\n    };\r\n\r\n    updateNode(node, value) {\r\n        node.value = value;\r\n    };\r\n};\r\n\r\nclass Node {\r\n    constructor(value, parent) {\r\n        this.parent = parent;\r\n        this.value = value;\r\n        this.leftChild = null;\r\n        this.rightChild = null;\r\n        this.id = nextID++;\r\n    };\r\n};\r\n\r\n\r\nclass RenderNode extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: \"New value\"\r\n        };\r\n        this.hovered = false;\r\n        this.addchildren = this.addchildren.bind(this);\r\n    };\r\n\r\n    addchildren() {\r\n        return (\r\n            <div className=\"AddChildButtons\">\r\n                {!this.props.left && this.hovered ? <button onClick={this.dragged ? null : this.props.addLeft} className=\"btn btn-info\" style={{ position: 'absolute', marginLeft: '0px' }}>Left</button> : false}\r\n                {!this.props.right && this.hovered ? <button onClick={this.dragged ? null : this.props.addRight} className=\"btn btn-info right\" style={{ position: 'absolute', left: '50%' }}>Right</button> : false}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Draggable onDrag={() => { this.props.updateAll(); this.dragged = true }} onStop={() => { this.props.updateAll(); this.dragged = false }}>\r\n                <div className=\"Node\" id={this.props.id} onMouseOver={() => { this.hovered = true; this.forceUpdate(); }} onMouseLeave={() => { this.hovered = false; this.forceUpdate(); }}>\r\n                    <input value={this.props.value} onInput={(e) => { this.props.updateValue(e.target.value) }} />\r\n                    {this.addchildren()}\r\n                </div>\r\n            </Draggable>\r\n        );\r\n    };\r\n};\r\n\r\nclass RenderTree extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.tree = new Tree();\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ height: \"100%\" }}>\r\n                {\r\n                    this.tree.root ? null : <button onClick={() => { this.tree.root = new Node('xx', null); this.forceUpdate(); }}>Add Root</button>\r\n                }\r\n                {this.tree.getNodes(this.tree.root).map((node) => {\r\n                    return (\r\n                        <RenderNode addLeft={() => { this.tree.addLeft(node, \"New Value\"); this.forceUpdate(); }} addRight={() => { this.tree.addRight(node, \"New Value\"); this.forceUpdate(); }}\r\n                            key={node.id} id={node.id} updateAll={() => this.forceUpdate()}\r\n                            updateValue={(value) => { this.tree.updateNode(node, value); this.forceUpdate(); }} value={node.value}\r\n                            right={node.rightChild} left={node.leftChild}\r\n                        />\r\n                    );\r\n                })}\r\n                {\r\n                    this.tree.getNodes(this.tree.root).map((node) => {\r\n                        if (node.parent) {\r\n                            return (<Xarrow key={node.id} start={String(node.parent.id)} end={String(node.id)} />)\r\n                        }\r\n                        return null;\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\n\r\nexport default RenderTree;\r\n\r\n","import React, { Component } from \"react\";\r\nimport {\r\n    Route,\r\n    NavLink,\r\n    HashRouter\r\n} from \"react-router-dom\";\r\nimport GraphApp from \"./Array/GraphApp2.js\";\r\nimport SortingApp from './BarSorting/App.js';\r\nimport DataStructures from \"./Data Structures/DataStructures.js\";\r\nimport TreeApp from './TreeApp.js'\r\n\r\nclass SinglePage extends Component {\r\n    render() {\r\n        return (\r\n            <HashRouter>\r\n                <br />\r\n                <div className=\"bg-light list-group-item\">\r\n                    <div className=\"container-fluid\">\r\n                        <ul>\r\n                            <li>\r\n                                <NavLink to='/Sorting'>\r\n                                    Sorting\r\n                                </NavLink>\r\n                            </li>\r\n                            <li>\r\n                                <NavLink to='/Trees'>\r\n                                    Trees\r\n                                </NavLink>\r\n                            </li>\r\n                            <li>\r\n                                <NavLink to='/DataStructures'>\r\n                                    Data Structures\r\n                                </NavLink>\r\n                            </li>\r\n                            <li>\r\n                                <NavLink to='/GraphSearchBasic'>\r\n                                    GraphApp\r\n                                </NavLink>\r\n                            </li>\r\n                            <li>\r\n                                TODO:\r\n                                <ul>\r\n                                    <li>\r\n                                        Skip lists visualizer\r\n                                    </li>\r\n                                    <li>\r\n                                        various BST visualizer\r\n                                    </li>\r\n                                    <li>\r\n                                        pathfinding algos\r\n                                    </li>\r\n                                    <li>\r\n                                        codewars\r\n                                    </li>\r\n                                </ul>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n                <br />\r\n                <Route path='/Sorting' component={SortingApp} />\r\n                <Route path='/Trees' component={TreeApp} />\r\n                <Route path='/DataStructures' component={DataStructures} />\r\n                <Route path='/GraphSearchBasic' component={GraphApp} />\r\n\r\n            </HashRouter>\r\n        );\r\n    };\r\n};\r\n\r\nexport default SinglePage;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Router from './router.js'\r\n\r\nReactDOM.render(\r\n    <Router/>,\r\n  document.getElementById('visualizer')\r\n);\r\n\r\n\r\n// reactDom.render(<Tree addBtn={sortBtn} valueSetter={rangeSelect}/>, document.getElementById('visualizer'))\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}