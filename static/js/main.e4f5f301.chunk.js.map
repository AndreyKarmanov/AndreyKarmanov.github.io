{"version":3,"sources":["Array/BinaryHeap.js","Array/GraphApp2.js","BarSorting/SortingOptions.js","BarSorting/App.js","Data Structures/General.js","Data Structures/SkipList2.js","Data Structures/DataStructures.js","Trees (bad)/TreeApp.js","eyecandy/introduction.js","router.js","index.js"],"names":["binary_heap","_data","_size","name","enqueue","priority","value","data","i","p","ret","push","v","dequeue","size","result","c1","c2","p0","p1","p2","pop","top","Square","x","y","highlight","distanceFromEnd","this","isEnd","isStart","passable","explored","previous","distance","Infinity","Matrix","grid","DIRECTIONS","create_cols","gen_maze","squareX","squareY","dir","inbounds","a","b","parseInt","Math","random","x1","y1","x2","y2","sqrt","col","create_col","row","distanceTo","square","swap","count","children","neighboor","gen_maze_recur","wallBox","setWall","yMid","xMid","floor","randRange","createSpaceOnLine","fromCord","toCord","staleCord","modifIsY","possible","numPassableAround","length","setEmpty","GraphOptions","className","disabled","props","searching","onChange","updateSearch","search","htmlFor","type","id","min","max","step","defaultValue","onInput","e","updateSize","target","onClick","resetMaze","startSearch","sorting","React","Component","RenderMatrix","matrix","map","idx","idy","onMouseOver","buttons","clicked","forceUpdate","onMouseDown","GraphApp","SIZES","state","bind","searchDFS","searchAstar","searchDijkstras","SEARCHES","searchBFS","setState","Promise","resolve","setTimeout","starting","vertex","explore","slowRender","PQ","ending","SortingOptions","updateSort","sortValue","sortSize","startSort","PureComponent","SortingApp","blocks","sortTypes","sortBubble","sortHeap","sortMerge","sortQuick","sortInsertion","sortSelection","make_bars","sortMergeRecur2","sortQuickRecur","sorted","c","d","reject","amount","fy","Array","keys","console","log","then","arr","unsorted","l","r","middle","sortMergeMerge2","newValue","splice","slice","pointer","left","right","pivot","j","trail","sortQuickRecur2","boundry","inBounds","downHeap","small","number","style","height","backgroundColor","highlightClass","nextID","Item","SkipNode","item","next","below","index","highlightBelow","highlightRight","arrowID","above","SkipList","onUpdate","topRight","topLeft","len","h","resettable","bottom","node","startNode","iterAfter","leftNode","printRow","hold","previousNodes","animate","String","findPreviousNodes","resetHighlights","newNode","previousNode","belowNode","runt","newTopRight","newTopLeft","addAfter","SkipListVisualizer","toSymbol","bottomNode","column","structure","iterCol","opacity","start","end","headSize","s","bottomLeft","renderCol","DataStructureInterface","inputValue","createRef","deleteValue","structureChange","structureValue","ref","addValue","current","delValue","DataStructuresApp","clearStructure","updateStructure","skiplist","isNaN","Number","insertOrdered","Tree","root","out","leftChild","rightChild","child","iterAll","Node","parent","RenderNode","hovered","addchildren","dragged","addLeft","position","marginLeft","addRight","onDrag","updateAll","onStop","onMouseLeave","updateValue","RenderTree","tree","getNodes","updateNode","introduction","href","alt","src","SinglePage","to","path","component","TreeApp","DataStructures","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e4f5f301.chunk.js","sourcesContent":["/* Binary Heap\r\n * Copyright 2015 330k\r\n * https://github.com/330k/\r\n *\r\n * This software is released under the MIT License.\r\n * http://opensource.org/licenses/mit-license.php\r\n */\r\nfunction binary_heap() {\r\n\tvar _data = [];\r\n\tvar _size = 0;\r\n\tvar enqueue = function (priority, value) {\r\n\t\tvar data = _data;\r\n\t\tvar i = 0;\r\n\t\tvar p = 0;\r\n\t\tvar ret = null;\r\n\r\n\t\tif (_size) {\r\n\t\t\tdata.push({ p: priority, v: value });\r\n\t\t\ti = _size;\r\n\t\t\tp = (i - 1) >> 1;//Math.floor((i - 1) * 0.5);\t// parent\r\n\t\t\twhile (p >= 0) {\r\n\t\t\t\tif (data[p].p < data[i].p) {\r\n\t\t\t\t\tret = data[i];\r\n\t\t\t\t\tdata[i] = data[p];\r\n\t\t\t\t\tdata[p] = ret;\r\n\r\n\t\t\t\t\ti = p;\r\n\t\t\t\t\tp = (i - 1) >> 1;//Math.floor((i - 1) * 0.5);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tdata.push({ p: priority, v: value });\r\n\t\t}\r\n\t\t_size = _size + 1;\r\n\t};\r\n\tvar dequeue = function () {\r\n\t\tvar data = _data;\r\n\t\tvar size = _size - 1;\r\n\t\tvar result = null;\r\n\t\tvar i = 0;\r\n\t\tvar c1 = 1;\t// left child\r\n\t\tvar c2 = 2;\t// right child\r\n\t\tvar p0 = 0.0;\r\n\t\tvar p1 = 0.0;\r\n\t\tvar p2 = 0.0;\r\n\t\tvar ret = null;\r\n\r\n\t\tif (_size) {\r\n\t\t\tresult = data[0].v;\r\n\t\t\tdata[0] = data[size];\r\n\t\t\tdata.pop();\r\n\r\n\t\t\twhile (c1 < size) {\r\n\t\t\t\tif (c2 < size) {\r\n\t\t\t\t\tp0 = data[i].p;\r\n\t\t\t\t\tp1 = data[c1].p;\r\n\t\t\t\t\tp2 = data[c2].p;\r\n\r\n\t\t\t\t\tif ((p1 < p2) && (p0 < p2)) {\r\n\t\t\t\t\t\tret = data[i];\r\n\t\t\t\t\t\tdata[i] = data[c2];\r\n\t\t\t\t\t\tdata[c2] = ret;\r\n\t\t\t\t\t\ti = c2;\r\n\t\t\t\t\t} else if (p0 < p1) {\r\n\t\t\t\t\t\tret = data[i];\r\n\t\t\t\t\t\tdata[i] = data[c1];\r\n\t\t\t\t\t\tdata[c1] = ret;\r\n\t\t\t\t\t\ti = c1;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tc1 = (i << 1) + 1;\r\n\t\t\t\t\tc2 = (i << 1) + 2;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tp0 = data[i].p;\r\n\t\t\t\t\tp1 = data[c1].p;\r\n\r\n\t\t\t\t\tif (p0 < p1) {\r\n\t\t\t\t\t\tret = data[i];\r\n\t\t\t\t\t\tdata[i] = data[c1];\r\n\t\t\t\t\t\tdata[c1] = ret;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t_size = size;\r\n\t\t\treturn result;\r\n\t\t} else {\r\n\t\t\treturn (void 0);\r\n\t\t}\r\n\t};\r\n\tvar top = function () {\r\n\t\treturn _data[0].v;\r\n\t};\r\n\tvar size = function () {\r\n\t\treturn _size;\r\n\t};\r\n\r\n\treturn {\r\n\t\tname: 'Binary Heap',\r\n\t\tenqueue: enqueue,\r\n\t\tdequeue: dequeue,\r\n\t\ttop: top,\r\n\t\tsize: size\r\n\t};\r\n};\r\n\r\nexport default binary_heap;","import binary_heap from \"./BinaryHeap.js\";\r\nimport React from \"react\";\r\n\r\nclass Square {\r\n    constructor(x, y, highlight = 'empty', distanceFromEnd = 0) {\r\n\r\n        // For finding adjacent squares\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        // Visualization\r\n        this.highlight = highlight;\r\n\r\n        // Denote start/end\r\n        this.isEnd = false;\r\n        this.isStart = false;\r\n\r\n        // For pathfinding\r\n        this.passable = true;\r\n        this.explored = false;\r\n\r\n        // Dijkstras'\r\n        this.previous = null;\r\n        this.distance = Infinity;\r\n\r\n        // Astar\r\n        this.distanceFromEnd = distanceFromEnd;\r\n    };\r\n\r\n    explore() {\r\n        this.explored = true;\r\n\r\n        if (this.isEnd) {\r\n            return true;\r\n        };\r\n\r\n        if (this.passable && !this.isStart) {\r\n            this.highlight = \"searched\";\r\n        };\r\n\r\n        return false;\r\n    };\r\n\r\n    clicked() {\r\n        if (!(this.isEnd || this.isStart || this.explored)) {\r\n            if (this.passable) {\r\n                this.highlight = \"wall\";\r\n            } else {\r\n                this.highlight = \"empty\";\r\n            };\r\n            this.passable = !this.passable;\r\n        };\r\n    };\r\n\r\n    setWall() {\r\n        this.passable = false;\r\n        this.highlight = \"wall\";\r\n    };\r\n\r\n    setEmpty() {\r\n        this.passable = true;\r\n        this.highlight = \"empty\";\r\n    };\r\n};\r\n\r\nclass Matrix {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.grid = [];\r\n        this.DIRECTIONS = [[0, -1], [1, 0], [0, 1], [-1, 0]];\r\n\r\n        // Create initial Grid\r\n        this.create_cols(x, y);\r\n        this.gen_maze();\r\n    };\r\n\r\n    // Accessors.\r\n    inbounds(x, y) {\r\n        return 0 <= x && x < this.x && 0 <= y && y < this.y;\r\n    };\r\n\r\n    *children(squareX, squareY) {\r\n        let x, y = null;\r\n        for (let dir of this.DIRECTIONS) {\r\n            if (this.inbounds((x = squareX - dir[0]), (y = squareY - dir[1]))) {\r\n                yield this.grid[x][y];\r\n            };\r\n        };\r\n    };\r\n\r\n    starting() {\r\n        return this.grid[1][1];\r\n    };\r\n\r\n    ending() {\r\n        return this.grid[this.x - 2][this.y - 2];\r\n    };\r\n\r\n    randRange(a, b) {\r\n        return parseInt(a + Math.random() * (b - a));\r\n    };\r\n\r\n    distanceTo(x1, y1, x2, y2) {\r\n        return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\r\n    };\r\n\r\n    // Mutators\r\n    create_cols(x, y) {\r\n        for (let col = 0; col < x; col++) {\r\n            this.grid.push(this.create_col(col, y));\r\n        };\r\n        this.grid[1][1].highlight = 'start';\r\n        this.grid[1][1].isStart = true;\r\n        this.grid[this.x - 2][this.y - 2].highlight = 'end';\r\n        this.grid[this.x - 2][this.y - 2].isEnd = true;\r\n    };\r\n\r\n    create_col(x, y) {\r\n        let col = [];\r\n        for (let row = 0; row < y; row++) {\r\n            col.push(new Square(x, row, 'empty', this.distanceTo(x, row, this.x - 1, this.y - 1)));\r\n        };\r\n        return col;\r\n    };\r\n\r\n    resetMaze() {\r\n        for (let col = 0; col < this.x; col++) {\r\n            for (let row = 0; row < this.y; row++) {\r\n                let square = this.grid[col][row];\r\n                if (square.passable && !square.isEnd && !square.isStart) {\r\n                    square.highlight = 'empty';\r\n                };\r\n                square.explored = false;\r\n                square.distance = Infinity;\r\n                square.previous = null;\r\n            };\r\n        };\r\n    };\r\n\r\n    // Maze generation\r\n    numPassableAround(x, y, swap = false) {\r\n        if (swap) {\r\n            [x, y] = [y, x];\r\n        };\r\n\r\n        let count = 0;\r\n        for (let neighboor of this.children(x, y)) {\r\n            if (neighboor.passable) {\r\n                count++;\r\n            };\r\n        };\r\n        return count;\r\n    };\r\n\r\n    gen_maze() {\r\n        this.gen_maze_recur(1, 1, this.x - 2, this.y - 2);\r\n        this.wallBox(0, 0, this.x - 1, this.y - 1);\r\n    };\r\n\r\n    wallBox(x1, y1, x2, y2) {\r\n        for (let row = y1; row < y2; row++) {\r\n            this.grid[x1][row].setWall();\r\n            this.grid[x2][row].setWall();\r\n        };\r\n\r\n        for (let col = x1; col <= x2; col++) {\r\n            this.grid[col][y1].setWall();\r\n            this.grid[col][y2].setWall();\r\n        };\r\n    };\r\n\r\n\r\n    // try making prims algo because you actually red the steps on wikipedia instead of not reading\r\n    //\r\n    async gen_maze_recur(x1, y1, x2, y2) {\r\n        if (x2 - x1 > 1 && y2 - y1 > 1) {\r\n            let xMid, yMid = 0;\r\n\r\n            if (x2 - x1 > 11 && y2 - y1 > 11) {\r\n                xMid = x1 + Math.floor((x2 - x1) / 2);\r\n                yMid = y1 + Math.floor((y2 - y1) / 2);\r\n\r\n            } else {\r\n                xMid = this.randRange(x1 + 1, x2 - 1);\r\n                yMid = this.randRange(y1 + 1, y2 - 1);\r\n            };\r\n\r\n            for (let x = x1; x <= x2; x++) {\r\n                this.grid[x][yMid].setWall();\r\n            };\r\n            for (let y = y1; y <= y2; y++) {\r\n                this.grid[xMid][y].setWall();\r\n            };\r\n            this.gen_maze_recur(x1, y1, xMid - 1, yMid - 1);\r\n            this.gen_maze_recur(x1, yMid + 1, xMid - 1, y2);\r\n            this.gen_maze_recur(xMid + 1, y1, x2, yMid - 1);\r\n            this.gen_maze_recur(xMid + 1, yMid + 1, x2, y2);\r\n\r\n            switch (this.randRange(0, 3)) {\r\n                case 0:\r\n                    this.createSpaceOnLine(xMid + 1, x2, yMid, false);\r\n                    this.createSpaceOnLine(x1, xMid - 1, yMid, false);\r\n                    this.createSpaceOnLine(yMid + 1, y2, xMid, true);\r\n                    break;\r\n                case 1:\r\n                    this.createSpaceOnLine(y1, yMid - 1, xMid, true);\r\n                    this.createSpaceOnLine(x1, xMid - 1, yMid, false);\r\n                    this.createSpaceOnLine(yMid + 1, y2, xMid, true);\r\n                    break;\r\n                case 2:\r\n                    this.createSpaceOnLine(y1, yMid - 1, xMid, true);\r\n                    this.createSpaceOnLine(xMid + 1, x2, yMid, false);\r\n                    this.createSpaceOnLine(yMid + 1, y2, xMid, true);\r\n                    break;\r\n                case 3:\r\n                    this.createSpaceOnLine(y1, yMid - 1, xMid, true);\r\n                    this.createSpaceOnLine(xMid + 1, x2, yMid, false);\r\n                    this.createSpaceOnLine(x1, xMid - 1, yMid, false);\r\n                    break;\r\n                default:\r\n                    break;\r\n            };\r\n        };\r\n    };\r\n\r\n    createSpaceOnLine(fromCord, toCord, staleCord, modifIsY) {\r\n        let possible = [];\r\n        for (; fromCord <= toCord; fromCord++) {\r\n            if (this.numPassableAround(fromCord, staleCord, modifIsY) > 1) {\r\n                possible.push(fromCord);\r\n            };\r\n        };\r\n        if (possible.length > 0) {\r\n            if (modifIsY) {\r\n                this.grid[staleCord][possible[this.randRange(0, possible.length)]].setEmpty();\r\n            } else {\r\n                this.grid[possible[this.randRange(0, possible.length)]][staleCord].setEmpty();\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\n\r\n// Rendering of the choices\r\nclass GraphOptions extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"row w-100\">\r\n                <div className=\"col-6 mt-2\">\r\n                    <select className=\"form-select\" disabled={this.props.searching} onChange={this.props.updateSearch} value={this.props.search}>\r\n                        <option value=\"DFS\">Depth First Search</option>\r\n                        <option value=\"BFS\" disabled={true}>Breadth First Search</option>\r\n                        <option value=\"ASTAR\">A star Search</option>\r\n                        <option value=\"DIJ\">Djikstras</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <label htmlFor=\"rangeSelect\" className=\"form-label\"> Grid Size: {[\"Small\", \"Medium\", \"Large\", \"X-Large Square\"][this.props.size]}</label>\r\n                    <input type=\"range\" className=\"form-range\" id=\"rangeSelect\" disabled={this.props.searching} min=\"0\" max=\"3\" step=\"1\" defaultValue={this.props.size} onInput={(e) => this.props.updateSize(e.target.value)} />\r\n                </div>\r\n                <hr className=\"mt-4\" />\r\n                <div className=\"col-3\">\r\n                    <button className={\"w-100 btn btn-success\" + (this.props.searching ? ' disabled' : ' ')} onClick={() => { this.props.updateSize(this.props.size) }}>New Maze</button>\r\n                </div>\r\n                <div className=\"col-3\">\r\n                    <button className={\"w-100 btn btn-success\" + (this.props.searching ? ' disabled' : ' ')} onClick={this.props.resetMaze}>Reset Maze</button>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <button className={\"w-100 btn btn-success\" + (this.props.searching ? ' disabled' : ' ')} onClick={this.props.startSearch}>{this.props.sorting ? 'Searching...' : 'Search'}</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\n\r\n// Rendering of the overall.\r\nclass RenderMatrix extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container h-100 d-flex flex-row align-items-stretch mt-3 mb-3\">\r\n                {this.props.matrix.grid.map((col, idx) =>\r\n                    <div className=\"d-flex flex-column flex-column-reverse w-100 h-100\" key={idx}>\r\n                        {col.map((square, idy) =>\r\n                            <div\r\n                                className={\"GridSquare shadow-sm border rounded \" + square.highlight}\r\n                                key={idy}\r\n                                onMouseOver={(e) => {\r\n                                    if (e.buttons) {\r\n                                        square.clicked()\r\n                                        this.forceUpdate();\r\n                                    };\r\n                                }}\r\n                                onMouseDown={() => {\r\n                                    square.clicked()\r\n                                    this.forceUpdate();\r\n                                }}/>\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nclass GraphApp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.SIZES = [[16, 8], [24, 12], [48, 24], [48, 48]];\r\n        this.state = {\r\n            search: 'ASTAR',\r\n            searching: false,\r\n            size: 1,\r\n            matrix: new Matrix(24, 12)\r\n        };\r\n\r\n\r\n\r\n        this.updateSearch = this.updateSearch.bind(this);\r\n        this.updateSize = this.updateSize.bind(this);\r\n        this.startSearch = this.startSearch.bind(this);\r\n        this.searchDFS = this.searchDFS.bind(this);\r\n        this.searchAstar = this.searchAstar.bind(this);\r\n        this.searchDijkstras = this.searchDijkstras.bind(this);\r\n        this.resetMaze = this.resetMaze.bind(this);\r\n\r\n        this.SEARCHES = {\r\n            'DFS': this.searchDFS,\r\n            'DIJ': this.searchDijkstras,\r\n            'BFS': this.searchBFS,\r\n            'ASTAR': this.searchAstar\r\n        };\r\n    };\r\n\r\n    updateSize(value) {\r\n        this.setState({\r\n            size: value,\r\n            matrix: new Matrix(...this.SIZES[value])\r\n        });\r\n    };\r\n\r\n    updateSearch(e) {\r\n        this.setState({\r\n            search: e.target.value\r\n        });\r\n    };\r\n\r\n    resetMaze() {\r\n        this.state.matrix.resetMaze();\r\n        this.forceUpdate();\r\n    };\r\n\r\n    slowRender() {\r\n        return new Promise((resolve) => {\r\n            this.forceUpdate();\r\n            setTimeout(() => {\r\n                resolve();\r\n            }, 5);\r\n        });\r\n    };\r\n\r\n    async startSearch() {\r\n        this.setState({\r\n            searching: true\r\n        });\r\n        await this.SEARCHES[this.state.search](this.state.matrix.starting());\r\n        this.setState({\r\n            searching: false\r\n        });\r\n    };\r\n\r\n\r\n    async searchDFS(square) {\r\n        for (let vertex of this.state.matrix.children(square.x, square.y)) {\r\n            if (vertex.passable && !vertex.explored) {\r\n                if (vertex.explore()) {\r\n                    return true;\r\n                } else {\r\n                    await this.slowRender();\r\n                    if (await this.searchDFS(vertex)) {\r\n                        return true;\r\n                    };\r\n                };\r\n            };\r\n        };\r\n    };\r\n \r\n    async searchAstar(square) {\r\n        var PQ = binary_heap();\r\n        square.distance = 0;\r\n        PQ.enqueue(0, square);\r\n        while (PQ.size() > 0) {\r\n            let square = PQ.dequeue();\r\n            // explore square, if ending then quit.\r\n            if (square.explore()) {\r\n                break;\r\n            } else {\r\n                // square.explored, therefore need a render.\r\n                await this.slowRender();\r\n                for (let vertex of [...this.state.matrix.children(square.x, square.y)]) {\r\n                    // if the square is not a wall, isn't explored, and the new distance is shorter.\r\n                    if (vertex.passable && !vertex.explored && square.distance + 2 < vertex.distance) {\r\n                        vertex.distance = square.distance + 1;\r\n                        vertex.previous = square;\r\n                        PQ.enqueue(-vertex.distanceFromEnd, vertex);\r\n                    };\r\n                };\r\n            };\r\n        };\r\n        // loop through the previous ones ya know. \r\n        square = this.state.matrix.ending().previous;\r\n        if (!square) {\r\n            return;\r\n        };\r\n        while (square.previous) {\r\n            square.highlight = \"Path\";\r\n            square = square.previous;\r\n            await this.slowRender();\r\n        };\r\n    };\r\n\r\n    async searchDijkstras(square) {\r\n        var PQ = binary_heap();\r\n        square.distance = 0;\r\n        PQ.enqueue(0, square);\r\n        while (PQ.size() > 0) {\r\n            let square = PQ.dequeue();\r\n            // explore square, if ending then quit.\r\n            if (square.explore()) {\r\n                break;\r\n            } else {\r\n                // square.explored, therefore need a render.\r\n                await this.slowRender();\r\n                for (let vertex of [...this.state.matrix.children(square.x, square.y)]) {\r\n                    // if the square is not a wall, isn't explored, and the new distance is shorter.\r\n                    if (vertex.passable && !vertex.explored && square.distance + 1 < vertex.distance) {\r\n                        vertex.distance = square.distance + 1;\r\n                        vertex.previous = square;\r\n                        PQ.enqueue(-(square.distance + 1), vertex);\r\n                    };\r\n                };\r\n            };\r\n        };\r\n        // loop through the previous ones ya know. \r\n        square = this.state.matrix.ending().previous;\r\n        if (!square) {\r\n            return;\r\n        };\r\n        while (square.previous) {\r\n            square.highlight = \"Path\";\r\n            square = square.previous;\r\n            await this.slowRender();\r\n        };\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"list-group shadow-lg border rounded\">\r\n                <div className=\"bg-light list-group-item\">\r\n                    <div className=\"container-fluid\">\r\n                        <GraphOptions search={this.state.search} searching={this.state.searching} size={this.state.size} resetMaze={this.resetMaze} startSearch={this.startSearch} updateSearch={this.updateSearch} updateSize={this.updateSize} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"list-group-item\">\r\n                    <div className=\"container bottom\">\r\n                        <RenderMatrix matrix={this.state.matrix} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default GraphApp;","import React from \"react\";\r\n\r\nclass SortingOptions extends React.PureComponent {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row w-100\">\r\n                <div className=\"col-6 mt-2\">\r\n                    <select id=\"sortSelect\" className=\"form-select\" disabled={this.props.sorting} onChange={this.props.updateSort} value={this.props.sortValue}>\r\n                        <option value=\"merge\">Merge Sort</option>\r\n                        <option value=\"quick\">Quick Sort</option>\r\n                        <option value=\"heap\">Heap Sort</option>\r\n                        <option value=\"bubble\">Bubble Sort</option>\r\n                        <option value=\"insert\">Insertion Sort</option>\r\n                        <option value=\"selection\">Selection Sort</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <label htmlFor=\"rangeSelect\" className=\"form-label\">Array Size</label>\r\n                    <input type=\"range\" className=\"form-range\" id=\"rangeSelect\" disabled={this.props.sorting} min=\"10\" max=\"100\" step=\"1\" defaultValue={this.props.sortSize} onInput={(e) => this.props.updateSize(e.target.value)} />\r\n                </div>\r\n                <hr className=\"mt-4\" />\r\n                <button id=\"sort\" className={\"btn btn-success\" + (this.props.sorting ? ' disabled' : ' ')} onClick={this.props.startSort}>{this.props.sorting ? 'Sorting': 'Sort'}</button>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\n\r\nexport default SortingOptions;","import React from 'react';\r\nimport SortingOptions from './SortingOptions.js';\r\n\r\nclass SortingApp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sortValue: 'merge',\r\n            sortSize: \"50\",\r\n            blocks: []\r\n        };\r\n\r\n        this.sortTypes = {\r\n            'bubble': this.sortBubble, 'heap': this.sortHeap,\r\n            'merge': this.sortMerge, 'quick': this.sortQuick,\r\n            'insert': this.sortInsertion, 'selection': this.sortSelection\r\n        };\r\n\r\n\r\n        this.updateSize = this.updateSize.bind(this);\r\n        this.updateSort = this.updateSort.bind(this);\r\n        this.make_bars = this.make_bars.bind(this);\r\n        this.startSort = this.startSort.bind(this);\r\n        this.slowRender = this.slowRender.bind(this);\r\n        this.sortMergeRecur2 = this.sortMergeRecur2.bind(this);\r\n        this.sortQuickRecur = this.sortQuickRecur.bind(this);\r\n        this.sorting = false;\r\n        this.sorted = false;\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.make_bars(50);\r\n    };\r\n\r\n    // Thanks to cocco on stack overflow, shuffles an array.\r\n    fy(a, b, c, d) {//array,placeholder,placeholder,placeholder\r\n        c = a.length; while (c) {\r\n            b = Math.random() * c-- | 0;\r\n            d = a[c];\r\n            a[c] = a[b];\r\n            a[b] = d;\r\n        }\r\n        return a;\r\n    };\r\n\r\n    slowRender(blocks) {\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                this.setState({ blocks: blocks }, () => {\r\n                    resolve()\r\n                })\r\n            }, 1375 / parseInt(this.state.sortSize));\r\n        })\r\n    }\r\n\r\n    make_bars(amount) {\r\n        this.setState({\r\n            blocks: this.fy([...Array(parseInt(amount)).keys()])\r\n        });\r\n        this.sorted = false\r\n    };\r\n\r\n    updateSort(e) {\r\n        this.setState({\r\n            sortValue: e.target.value\r\n        });\r\n    };\r\n\r\n    updateSize(e) {\r\n        this.make_bars(e.target.value)\r\n    };\r\n\r\n    startSort() {\r\n        if (this.sorting || this.sorted) {\r\n            return\r\n        };\r\n        this.sorting = true\r\n        console.log(this.state.sortValue, 'selected')\r\n        this.sortTypes[this.state.sortValue].bind(this)().then(() => {\r\n            this.sorting = false\r\n            this.sorted = true\r\n            console.log('sorting complete')\r\n            this.forceUpdate();\r\n        });\r\n        console.log('done starting')\r\n    }\r\n\r\n    swap(arr, a, b) {\r\n        [arr[a], arr[b]] = [arr[b], arr[a]]\r\n    }\r\n\r\n    async sortBubble() {\r\n        let a = this.state.blocks\r\n        let unsorted = true;\r\n        while (unsorted) {\r\n            unsorted = false;\r\n            for (let x = 0; x < a.length - 1; x++) {\r\n                if (a[x] > a[x + 1]) {\r\n                    this.swap(a, x, x + 1);\r\n                    unsorted = true;\r\n                    await this.slowRender(a);\r\n                }\r\n            };\r\n        };\r\n    };\r\n\r\n    async sortSelection() {\r\n        let a = this.state.blocks\r\n        for (let x = 0; x < a.length; x++) {\r\n            let min = x\r\n            for (let y = x; y < a.length; y++) {\r\n                if (a[min] > a[y]) {\r\n                    min = y\r\n                }\r\n            }\r\n            this.swap(a, min, x)\r\n            await this.slowRender(a)\r\n        }\r\n    };\r\n\r\n    async sortMerge() {\r\n        await this.sortMergeRecur2(this.state.blocks, 0, this.state.blocks.length)\r\n    };\r\n\r\n    async sortMergeRecur2(arr, l, r) {\r\n        // inplace merge sort.\r\n        if (r - 1> l) {\r\n            let middle = Math.floor((r - l) / 2) + l;\r\n            await this.sortMergeRecur2(arr, l, middle);\r\n            await this.sortMergeRecur2(arr, middle, r);\r\n            await this.sortMergeMerge2(arr, l, middle, r);\r\n        };\r\n    };\r\n\r\n    async sortMergeMerge2(arr, l, middle, r) {\r\n        // inplace merge.\r\n        let newValue = null;\r\n        while (l < middle && middle < r) {\r\n            if (arr[l] < arr[middle]) {\r\n                l++;\r\n                await this.slowRender(arr)\r\n\r\n            } else {\r\n                newValue = arr[middle];\r\n                arr.splice(middle++, 1);\r\n                arr.splice(l++, 0, newValue);\r\n                await this.slowRender(arr)\r\n            };\r\n        };\r\n\r\n        if (middle < r) {\r\n            let slice = arr.slice(middle, r);\r\n            arr.splice(middle, slice.length, ...slice);\r\n            await this.slowRender(arr)\r\n        };\r\n    };\r\n\r\n    async sortInsertion() {\r\n        let a = this.state.blocks\r\n        for (let x = 1; x < a.length; x++) {\r\n            let pointer = x;\r\n            for (let y = x - 1; y >= 0; y--) {\r\n                if (a[pointer] < a[y]) {\r\n                    this.swap(a, pointer, y)\r\n                    pointer = y;\r\n                    await this.slowRender(a);\r\n                } else {\r\n                    break;\r\n                };\r\n            };\r\n        };\r\n    };\r\n\r\n    async sortQuick() {\r\n        await this.sortQuickRecur(this.state.blocks, 0, this.state.blocks.length - 1)\r\n    }\r\n\r\n    async sortQuickRecur(a, left, right) {\r\n        if (left < right) {\r\n            let pivot = a[right];\r\n            let i = left - 1;\r\n            for (let j = left; j < right; j++) {\r\n                if (a[j] < pivot) {\r\n                    i += 1;\r\n                    this.swap(a, i, j);\r\n                    await this.slowRender(a);\r\n                };\r\n            };\r\n            this.swap(a, i + 1, right);\r\n            await this.slowRender(a);\r\n            await this.sortQuickRecur(a, left, i);\r\n            await this.sortQuickRecur(a, i + 2, right);\r\n            return null\r\n        };\r\n    };\r\n\r\n    async sortQuickRecur2(arr, l, r) {\r\n        if (r > l) {\r\n            let pivot = arr[r];\r\n            let trail = l - 1;\r\n            for (let pointer = l; pointer < r; pointer++) {\r\n                if (arr[pointer] < pivot) {\r\n                    this.swap(arr, pointer, ++trail);\r\n                    await this.slowRender(arr);\r\n                };\r\n            };\r\n            this.swap(arr, r, trail + 1);\r\n            await this.slowRender(arr);\r\n            await this.sortQuickRecur2(arr, l, trail);\r\n            await this.sortQuickRecur2(arr, trail + 2, r);\r\n\r\n        };\r\n    };\r\n\r\n    async sortHeap() {\r\n        var arr = this.state.blocks\r\n        var boundry = arr.length\r\n\r\n        const inBounds = (i) => {\r\n            return i < boundry;\r\n        };\r\n\r\n        const left = (i) => {\r\n            return inBounds(i * 2 + 1) ? (i * 2 + 1) : null\r\n        };\r\n\r\n        const right = (i) => {\r\n            return inBounds(i * 2 + 2) ? (i * 2 + 2) : null\r\n        };\r\n        const downHeap = async (i) => {\r\n            let l, r, small;\r\n            while ((l = left(i))) {\r\n                small = l;\r\n                if ((r = right(i))) {\r\n                    if (arr[r] > arr[l]) {\r\n                        small = r;\r\n                    };\r\n                };\r\n                if (arr[small] > arr[i]) {\r\n                    this.swap(arr, small, i);\r\n                    i = small;\r\n                    await this.slowRender(arr);\r\n                } else {\r\n                    break;\r\n                };\r\n            };\r\n        };\r\n\r\n        for (let x = boundry - 1; x >= 0; x--) {\r\n            await downHeap(x);\r\n        };\r\n\r\n        while (boundry > 0) {\r\n            boundry--;\r\n            this.swap(arr, 0, boundry)\r\n            await this.slowRender(arr)\r\n            await downHeap(0)\r\n        };\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"list-group shadow-lg border rounded\">\r\n                <div className=\"bg-light list-group-item\">\r\n                    <div className=\"container-fluid\">\r\n                        <SortingOptions updateSort={this.updateSort} startSort={this.startSort} updateSize={this.make_bars} sortSize={this.state.sortSize} sortValue={this.state.sortValue} sorting={this.sorting} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"list-group-item\">\r\n                    <div className=\"container justify-content-center sorting bottom\">\r\n                        {this.state.blocks.map((number) => <div className=\"sortable\" key={number} style={{ height: (number) + 1 + \"%\", backgroundColor: `hsl(177, 70%, ${60 - (number) * 0.5}%)` }}></div>)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default SortingApp;","var nextID = 0;\r\n\r\nexport const highlightClass = {\r\n    0: '',\r\n    1: 'updated',\r\n    2: 'touched'\r\n};\r\nexport class BaseNode {\r\n    constructor(value, highlight = 0) {\r\n        // 0 == nothing\r\n        // 1 == updated\r\n        // 2 == compared\r\n        this.value = value;\r\n        this.highlight = highlight;\r\n        this.id = nextID++;\r\n    };\r\n};","import React from 'react';\r\nimport Xarrow, { Xwrapper } from 'react-xarrows';\r\nimport { highlightClass } from './General';\r\n\r\nvar nextID = 0;\r\nclass Item {\r\n    constructor(value) {\r\n        this.value = value;\r\n    };\r\n};\r\n\r\nclass SkipNode {\r\n    constructor(item, next = null, below = null, index = null, highlight = 0) {\r\n        this.item = item;\r\n        this.next = next;\r\n        this.below = below;\r\n        this.index = index;\r\n        this.highlight = highlight;\r\n        this.highlightBelow = false;\r\n        this.highlightRight = false;\r\n        this.id = nextID++;\r\n        this.arrowID = nextID++;\r\n\r\n        // above is only needed to ease rendering. Not necessary for a basic skiplist.\r\n        this.above = null;\r\n    }\r\n};\r\n\r\nexport class SkipList {\r\n    constructor(onUpdate = () => { }) {\r\n        this.onUpdate = onUpdate;\r\n\r\n        // topright is only needed to ease rendering. Not necessary for a basic skiplist.\r\n        this.topRight = new SkipNode(new Item(Infinity), null, null, 1)\r\n\r\n        this.topLeft = new SkipNode(new Item(-Infinity), this.topRight, null, 0);\r\n        this.len = 2;\r\n        this.h = 1;\r\n        this.resettable = [];\r\n    };\r\n\r\n    *iterCol(bottom) {\r\n        while (bottom) {\r\n            yield bottom;\r\n            bottom = bottom.above;\r\n        };\r\n    };\r\n\r\n    *iterRows() {\r\n        let node = this.topLeft;\r\n        while (node) {\r\n            yield node;\r\n            node = node.below;\r\n        };\r\n    };\r\n\r\n    *iterAfter(node) {\r\n        while (node) {\r\n            yield node;\r\n            node = node.next;\r\n        };\r\n    };\r\n\r\n    printRow(startNode) {\r\n        console.log([...this.iterAfter(startNode)].map((node) => node.item.value));\r\n    };\r\n\r\n    printAll() {\r\n        let leftNode = this.topLeft;\r\n        while (leftNode) {\r\n            this.printRow(leftNode);\r\n            leftNode = leftNode.below;\r\n        };\r\n    };\r\n\r\n    animate(node, highlight, hold = false) {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                node.highlight = highlight;\r\n                this.onUpdate();\r\n                if (!hold) {\r\n                    node.highlight = 0;\r\n                };\r\n                resolve();\r\n            }, 150);\r\n        });\r\n    };\r\n\r\n    resetHighlights() {\r\n        for (let node of this.resettable) {\r\n            node.highlight = 0;\r\n            node.highlightBelow = false;\r\n            node.highlightRight = false;\r\n        };\r\n    };\r\n\r\n    async findPreviousNodes(value) {\r\n        let node = this.topLeft;\r\n        let previousNodes = [];\r\n        while (true) {\r\n            await this.animate(node, 2, true);\r\n            this.resettable.push(node);\r\n            if (node.next.item.value >= value || node.next.item.value === Infinity) {\r\n                previousNodes.push(node);\r\n                if (node.below) {\r\n                    node.highlightBelow = true;\r\n                    node = node.below\r\n                } else {\r\n                    node.highlightRight = true;\r\n                    return previousNodes;\r\n                };\r\n            } else {\r\n                node.highlightRight = true;\r\n                node = node.next;\r\n            };\r\n        };\r\n    };\r\n\r\n    delAfter(previous, node) {\r\n        previous.next = node.next;\r\n    };\r\n\r\n    async delValue(value) {\r\n        value = String(value);\r\n        let previous = await this.findPreviousNodes(value, true);\r\n        for (let node of previous) {\r\n            console.log(node, node.next.item.value === value, value, node.next.item.value);\r\n            if (String(node.next.item.value) === value) {\r\n                console.log(node);\r\n                if (node.next.below){\r\n                    node.next.below.above = null;\r\n                }else{\r\n                    this.len--;\r\n                };\r\n                node.next = node.next.next;\r\n                await this.animate(node, 2, true);\r\n            };\r\n        };\r\n        this.resetHighlights();\r\n    };\r\n\r\n    async addAfter(previous, newNode) {\r\n        newNode.next = previous.next;\r\n        previous.next = newNode;\r\n        newNode.index = previous.index + 1;\r\n        await this.animate(newNode, 1, true);\r\n        this.resettable.push(newNode);\r\n    };\r\n\r\n    async insertOrdered(value) {\r\n        let previous = await this.findPreviousNodes(value);\r\n        let h = 1;\r\n        let previousNode = previous[previous.length - h];\r\n        let belowNode = null;\r\n        let item = new Item(value);\r\n        let newNode;\r\n        this.len++;\r\n        let runt = () => {\r\n            let p = Math.random();\r\n            return p > 0.5;\r\n        }\r\n        do {\r\n            if (h > this.h) {\r\n                this.h++;\r\n\r\n                let newTopRight = new SkipNode(new Item(Infinity), null, this.topRight, this.len - 1)\r\n                let newTopLeft = new SkipNode(new Item(-Infinity), newTopRight, this.topLeft, 0);\r\n\r\n                this.topRight.above = newTopRight;\r\n                this.topLeft.above = newTopLeft;\r\n\r\n                this.topRight = newTopRight;\r\n                this.topLeft = newTopLeft;\r\n\r\n                previous.splice(0, 0, this.topLeft);\r\n                previousNode = previous[previous.length - h];\r\n            };\r\n            newNode = new SkipNode(item, previousNode.next, belowNode, previous.next, 0)\r\n            if (belowNode) {\r\n                belowNode.above = newNode;\r\n            };\r\n            await this.addAfter(previousNode, belowNode = newNode);\r\n            previousNode = previous[previous.length - ++h];\r\n\r\n        } while (runt());\r\n        this.resetHighlights();\r\n    };\r\n};\r\n\r\nclass SkipListVisualizer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toSymbol = this.toSymbol.bind(this);\r\n    };\r\n\r\n    toSymbol(value) {\r\n        if (value === Infinity) {\r\n            return \"∞\";\r\n        } else if (value === -Infinity) {\r\n            return \"-∞\";\r\n        } else {\r\n            return String(value);\r\n        };\r\n    };\r\n\r\n    renderCol(bottomNode) {\r\n        let column = [...this.props.structure.iterCol(bottomNode)];\r\n        // make thte unused arrows opacity at 50% or something.\r\n        return (\r\n            <div className=\"d-flex flex-column-reverse m-2\">\r\n                <Xwrapper>\r\n                    {column.map((node) => {\r\n                        return (\r\n                            <div className={\"SkipNode border rounded m-3 p-2 text-center fs-6 \" + highlightClass[node.highlight]} id={node.id} key={node.id}>\r\n                                {this.toSymbol(node.item.value)}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    {column.map((node) => {\r\n                        if (node.next) {\r\n                            return (\r\n                                <div style={{ opacity: node.highlightRight ? '100%' : '30%' }}>\r\n                                    <Xarrow start={String(node.id)} end={String(node.next.id)} key={nextID++} headSize={4} />\r\n                                </div>\r\n                            );\r\n                        } else {\r\n                            return null;\r\n                        };\r\n\r\n                    })}\r\n                    {column.map((node) => {\r\n                        if (node.below) {\r\n                            return (\r\n                                <div style={{ opacity: node.highlightBelow ? '100%' : '30%' }}>\r\n                                    <Xarrow start={String(node.id)} end={String(node.below.id)} key={nextID++} headSize={4} s />\r\n                                </div>\r\n                            );\r\n                        } else {\r\n                            return null;\r\n                        };\r\n\r\n                    })}\r\n\r\n                </Xwrapper>\r\n            </div>\r\n\r\n        );\r\n    };\r\n\r\n    render() {\r\n        let bottomLeft = this.props.structure.topLeft;\r\n        while (bottomLeft.below) {\r\n            bottomLeft = bottomLeft.below;\r\n        };\r\n\r\n        return (\r\n            <div className=\"d-flex flex-row\">\r\n                {[...this.props.structure.iterAfter(bottomLeft)].map((bottomNode) => {\r\n                    return this.renderCol(bottomNode)\r\n                })}\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default SkipListVisualizer;","import React, { createRef } from 'react';\r\nimport Draggable from 'react-draggable';\r\nimport SkipListVisualizer, { SkipList } from './SkipList2.js';\r\n\r\nclass DataStructureInterface extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.inputValue = createRef();\r\n        this.deleteValue = createRef();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row w-100\">\r\n                <div className=\"col-6 mt-2\">\r\n                    <select id=\"sortSelect\" className=\"form-select\" onChange={(e) => this.props.structureChange(e)} value={this.props.structureValue}>\r\n                        <option value=\"Lists\" disabled={true}>Lists:</option>\r\n                        <option value=\"list\" disabled={true}>ArrayList</option>\r\n                        <option value=\"array\" disabled={true}>Array</option>\r\n                        <option value=\"linked list\" disabled={true}>Doubly Linked</option>\r\n                        <option value=\"skiplist\">Skip List</option>\r\n                        <option value=\"Trees\" disabled={true}>Trees:</option>\r\n                        <option value=\"redblack\" disabled={true}>Red Black</option>\r\n                        <option value=\"avl\" disabled={true}>AVL</option>\r\n                        <option value=\"splay\" disabled={true}>Splay</option>\r\n                    </select>\r\n                </div>\r\n                <hr className=\"mt-4\" />\r\n                <div className=\"col-4 mt-2\">\r\n                    <div className=\"input-group mb-3\">\r\n                        <input type=\"text\" className=\"form-control\" ref={this.inputValue} />\r\n                        <button className=\"btn btn-success\" onClick={() => { this.props.addValue(this.inputValue.current.value); this.inputValue.current.value = ''; }}>Insert Value</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-4 mt-2\">\r\n                    <div className=\"input-group mb-3\">\r\n                        <input type=\"text\" className=\"form-control\" ref={this.deleteValue} />\r\n                        <button className=\"btn btn-danger\" onClick={() => { this.props.delValue(this.deleteValue.current.value); this.deleteValue.current.value = ''; }}>Delete Value</button>\r\n                    </div>\r\n                </div>\r\n                {/* <div className=\"col-2 mt-2\">\r\n                    <button className=\"btn btn-danger\" onClick={this.props.clearStructure}>Clear All</button>\r\n                </div> */}\r\n            </div>\r\n        );\r\n    };\r\n};\r\nclass DataStructuresApp extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            structure: 'skiplist'\r\n        };\r\n\r\n        this.clearStructure = this.clearStructure.bind(this);\r\n        this.updateStructure = this.updateStructure.bind(this);\r\n        this.addValue = this.addValue.bind(this);\r\n        this.delValue = this.delValue.bind(this);\r\n        this.animate = this.animate.bind(this);\r\n        this.skiplist = new SkipList(this.animate)\r\n\r\n    };\r\n\r\n    componentDidMount() {\r\n        // this.skiplist.insertOrdered(1);\r\n        // this.skiplist.insertOrdered(2);\r\n        // this.skiplist.insertOrdered(3);\r\n    };\r\n\r\n    animate() {\r\n        this.forceUpdate()\r\n    };\r\n\r\n    updateStructure(e) {\r\n        this.setState({\r\n            structure: e.target.value\r\n        });\r\n    };\r\n\r\n    clearStructure() {\r\n        console.log('delete all');\r\n    };\r\n\r\n    addValue(value) {\r\n        if (value !== '') {\r\n            if (!isNaN(value)) {\r\n                value = Number(value)\r\n            };\r\n            console.log(value);\r\n            this.skiplist.insertOrdered(value);\r\n            this.forceUpdate();\r\n        };\r\n    };\r\n\r\n    delValue(value) {\r\n        if (value) {\r\n            console.log('del value; ', value);\r\n            this.skiplist.delValue(value);\r\n        };\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"h-100\">\r\n                <div className=\"list-group shadow-lg border rounded h-75\">\r\n                    <div className=\"bg-light list-group-item\">\r\n                        <div className=\"container-fluid\">\r\n                            <DataStructureInterface structureChange={this.updateStructure} structureValue={this.state.structure} addValue={this.addValue} delValue={this.delValue} clearStructure={this.clearStructure} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"list-group-item h-100 overflow-hidden\">\r\n                        <Draggable>\r\n                            <div>\r\n                                <SkipListVisualizer structure={this.skiplist} className=\"draggable\" />\r\n                            </div>\r\n                        </Draggable>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    };\r\n};\r\n\r\nexport default DataStructuresApp;","import React from 'react';\r\nimport Draggable from 'react-draggable';\r\nimport Xarrow from 'react-xarrows/lib';\r\n\r\nvar nextID = 0\r\nclass Tree {\r\n\r\n    constructor() {\r\n        this.root = null;\r\n        this.size = null;\r\n    };\r\n\r\n    children(node) {\r\n        let out = [];\r\n        if (node.leftChild) {\r\n            out.push(node.leftChild);\r\n        };\r\n        if (node.rightChild) {\r\n            out.push(node.rightChild);\r\n        };\r\n        // boolean(node.leftChild) ? out.push(node.leftChild) : null;\r\n        // boolean(node.rightChild) ? out.push(node.rightChild) : null;\r\n        return out;\r\n    };\r\n\r\n    *iterAll(node) {\r\n        if (!node) {\r\n            return;\r\n        };\r\n        yield node;\r\n        for (let child of this.children(node)) {\r\n            for (let out of this.iterAll(child)) {\r\n                yield out;\r\n            };\r\n        };\r\n    };\r\n\r\n    getNodes(node) {\r\n        return [...this.iterAll(node)]\r\n    };\r\n\r\n    addLeft(node, value) {\r\n        if (!node.leftChild) {\r\n            this.size++;\r\n            node.leftChild = new Node(value, node);\r\n            return node.leftChild;\r\n        };\r\n    };\r\n\r\n    addRight(node, value) {\r\n        if (!node.rightChild) {\r\n            this.size++;\r\n            node.rightChild = new Node(value, node);\r\n            return node.rightChild;\r\n        };\r\n    };\r\n\r\n    updateNode(node, value) {\r\n        node.value = value;\r\n    };\r\n};\r\n\r\nclass Node {\r\n    constructor(value, parent) {\r\n        this.parent = parent;\r\n        this.value = value;\r\n        this.leftChild = null;\r\n        this.rightChild = null;\r\n        this.id = nextID++;\r\n    };\r\n};\r\n\r\n\r\nclass RenderNode extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: \"New value\"\r\n        };\r\n        this.hovered = false;\r\n        this.addchildren = this.addchildren.bind(this);\r\n    };\r\n\r\n    addchildren() {\r\n        return (\r\n            <div className=\"AddChildButtons\">\r\n                {!this.props.left && this.hovered ? <button onClick={this.dragged ? null : this.props.addLeft} className=\"btn btn-info\" style={{ position: 'absolute', marginLeft: '0px' }}>Left</button> : false}\r\n                {!this.props.right && this.hovered ? <button onClick={this.dragged ? null : this.props.addRight} className=\"btn btn-info right\" style={{ position: 'absolute', left: '50%' }}>Right</button> : false}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Draggable onDrag={() => { this.props.updateAll(); this.dragged = true }} onStop={() => { this.props.updateAll(); this.dragged = false }}>\r\n                <div className=\"Node\" id={this.props.id} onMouseOver={() => { this.hovered = true; this.forceUpdate(); }} onMouseLeave={() => { this.hovered = false; this.forceUpdate(); }}>\r\n                    <input value={this.props.value} onInput={(e) => { this.props.updateValue(e.target.value) }} />\r\n                    {this.addchildren()}\r\n                </div>\r\n            </Draggable>\r\n        );\r\n    };\r\n};\r\n\r\nclass RenderTree extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.tree = new Tree();\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ height: \"100%\" }}>\r\n                {\r\n                    this.tree.root ? null : <button onClick={() => { this.tree.root = new Node('xx', null); this.forceUpdate(); }}>Add Root</button>\r\n                }\r\n                {this.tree.getNodes(this.tree.root).map((node) => {\r\n                    return (\r\n                        <RenderNode addLeft={() => { this.tree.addLeft(node, \"New Value\"); this.forceUpdate(); }} addRight={() => { this.tree.addRight(node, \"New Value\"); this.forceUpdate(); }}\r\n                            key={node.id} id={node.id} updateAll={() => this.forceUpdate()}\r\n                            updateValue={(value) => { this.tree.updateNode(node, value); this.forceUpdate(); }} value={node.value}\r\n                            right={node.rightChild} left={node.leftChild}\r\n                        />\r\n                    );\r\n                })}\r\n                {\r\n                    this.tree.getNodes(this.tree.root).map((node) => {\r\n                        if (node.parent) {\r\n                            return (<Xarrow key={node.id} start={String(node.parent.id)} end={String(node.id)} />)\r\n                        }\r\n                        return null;\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\n\r\nexport default RenderTree;\r\n\r\n","import React from \"react\";\r\n\r\nclass introduction extends React.PureComponent {\r\n    render() {\r\n        return (\r\n            <div className=\"list-group shadow-lg border rounded\">\r\n                <div className=\"bg-light list-group-item\">\r\n                    <h1 className=\"text-center\">\r\n                        Andrey Karmanov\r\n                    </h1>\r\n                    <hr className=\"mt-4\" />\r\n                    {/* <div class=\"badge-base LI-profile-badge\" data-locale=\"en_US\" data-size=\"medium\" data-theme=\"light\" data-type=\"VERTICAL\" data-vanity=\"andrey-karmanov\" data-version=\"v1\">\r\n                                <a class=\"badge-base__link LI-simple-link\" href=\"https://ca.linkedin.com/in/andrey-karmanov?trk=profile-badge\">Andrey Karmanov</a>\r\n                            </div> */}\r\n                    <ul className=\"nav justify-content-center\">\r\n                        <li className=\"nav-item mx-1\">\r\n                            <a href=\"https://linkedin.com/in/andrey-karmanov\" >\r\n                                <img className=\"rounded\" alt=\"LinkedIn link\" src=\"https://img.shields.io/badge/LinkedIn-0077B5?style=for-the-badge&amp;logo=linkedin&amp;logoColor=white\" />\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"nav-item mx-1\">\r\n                            <a href=\"https://github.com/AndreyKarmanov\" >\r\n                                <img className=\"rounded\" alt=\"Github link\" src=\"https://img.shields.io/badge/GitHub-100000?style=for-the-badge&logo=github&logoColor=white\" />\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"nav-item mx-1\">\r\n                            <a href=\"/Andrey_Karmanov_Resume_8-2021.pdf\" >\r\n                                <img className=\"rounded\" alt=\"Resume link\" src=\"/Express.svg\" />\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                    <hr />\r\n                    {/* <div className=\"continer-fluid row\">\r\n                        <div className=\"col-6\">\r\n                            *Description or life story?*\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            *cute pic of me*\r\n                        </div>\r\n                    </div> */}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\n\r\nexport default introduction;","import React, { Component } from \"react\";\r\nimport {\r\n    Route,\r\n    NavLink,\r\n    HashRouter\r\n} from \"react-router-dom\";\r\nimport GraphApp from \"./Array/GraphApp2.js\";\r\nimport SortingApp from './BarSorting/App.js';\r\nimport DataStructures from \"./Data Structures/DataStructures.js\";\r\nimport TreeApp from './Trees (bad)/TreeApp.js'\r\nimport Introduction from \"./eyecandy/introduction.js\";\r\n\r\nclass SinglePage extends Component {\r\n    render() {\r\n        return (\r\n            <HashRouter>\r\n                <Introduction />\r\n                <br />\r\n                <div className=\"list-group list-group-item shadow-lg border rounded\">\r\n                    <h2 className=\"text-center\">Projects</h2>\r\n                    <hr/>\r\n                    <ul className=\"nav justify-content-center\">\r\n                        <li className=\"nav-item mx-1\">\r\n                            <NavLink to='/Sorting'>\r\n                                <button type=\"button\" className=\"btn btn-outline-primary\">\r\n                                    Sorting Visual\r\n                                </button>\r\n                            </NavLink>\r\n                        </li>\r\n                        <li className=\"nav-item mx-1\">\r\n                            <NavLink to='/DataStructures'>\r\n                                <button type=\"button\" className=\"btn btn-outline-primary\">\r\n                                    Skip List Visual\r\n                                </button>\r\n                            </NavLink>\r\n                        </li>\r\n                        <li className=\"nav-item mx-1\">\r\n                            <NavLink to='/GraphSearchBasic'>\r\n                                <button type=\"button\" className=\"btn btn-outline-primary\">\r\n                                    Maze Solver\r\n                                </button>\r\n                            </NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <br />\r\n                <Route path='/Sorting' component={SortingApp} />\r\n                <Route path='/Trees' component={TreeApp} />\r\n                <Route path='/DataStructures' component={DataStructures} />\r\n                <Route path='/GraphSearchBasic' component={GraphApp} />\r\n            </HashRouter>\r\n        );\r\n    };\r\n};\r\n\r\nexport default SinglePage;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Router from './router.js'\r\n\r\nReactDOM.render(\r\n    <Router/>,\r\n  document.getElementById('visualizer')\r\n);\r\n\r\n\r\n// reactDom.render(<Tree addBtn={sortBtn} valueSetter={rangeSelect}/>, document.getElementById('visualizer'))\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}